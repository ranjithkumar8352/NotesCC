{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"collegeI",
				"collegeIdList"
			],
			[
				"profileI",
				"profileIdList"
			],
			[
				"blob",
				"blobToFile(theBlob: {lastModifiedDate: Date, name: ?}, fileName: ?) -> {lastModifiedDate: Date, name: ?}"
			],
			[
				"Htt",
				"HttpResponseRedirect"
			],
			[
				"u",
				"u"
			],
			[
				"sign_up",
				"sign_up_response"
			],
			[
				"searc",
				"search_response"
			],
			[
				"messa",
				"message_types"
			],
			[
				"respo",
				"Response"
			],
			[
				"sea",
				"search_response"
			],
			[
				"getComm",
				"getCommentMethod"
			],
			[
				"comment",
				"commentResource"
			],
			[
				"Comment",
				"CommentResponse"
			],
			[
				"ine",
				"IntegerField"
			],
			[
				"post",
				"postCommentMethod"
			],
			[
				"api",
				"apiMethods"
			],
			[
				"Mess",
				"MessageField"
			],
			[
				"Stri",
				"StringField"
			],
			[
				"mess",
				"messages"
			],
			[
				"Exce",
				"exception"
			],
			[
				"St",
				"StringField"
			],
			[
				"new",
				"newComment"
			],
			[
				"get",
				"getattr"
			],
			[
				"integer",
				"IntegerProperty"
			],
			[
				"String",
				"StringProperty"
			],
			[
				"Date",
				"DateTimeField"
			],
			[
				"d",
				"django"
			],
			[
				"vido",
				"videoURL (?)"
			],
			[
				"video",
				"videoURL (?)"
			],
			[
				"recor",
				"recordedBlob (?)"
			],
			[
				"reco",
				"recordedBlob (?)"
			],
			[
				"stop",
				"stopRecording()"
			],
			[
				"setR",
				"setTimeout(f: fn(), ms: number) -> number"
			],
			[
				"restart",
				"restartGame"
			],
			[
				"ke",
				"Keyboard(game: Phaser.Game)"
			],
			[
				"add",
				"addKey(keycode: num) -> Phaser.Key"
			],
			[
				"en",
				"enable(object: Object, children: bool)"
			],
			[
				"ima",
				"image(key: str, url: str, overwrite: bool) -> Phaser.Loader"
			],
			[
				"Game",
				"Game(width: num, height: num, renderer: num, parent: str, state: Object, transparent: bool, antialias: bool, physicsConfig: Object)"
			],
			[
				"Groc",
				"GroceryListService	alias"
			],
			[
				"User",
				"UserService	alias"
			],
			[
				"b",
				"boolean	keyword"
			],
			[
				"Mov",
				"MovieService	alias"
			],
			[
				"Movi",
				"MOVIE	alias"
			],
			[
				"Movie",
				"MovieService	alias"
			],
			[
				"import",
				"importScripts	function"
			],
			[
				"Rout",
				"Router	alias"
			],
			[
				"number",
				"number	keyword"
			],
			[
				"impo",
				"import	imports a module â€¦"
			],
			[
				"templ",
				"template	property"
			],
			[
				"DVD",
				"DVD	alias"
			],
			[
				"templa",
				"templateUrl	property"
			],
			[
				"providers",
				"providers	property"
			],
			[
				"hero",
				"HeroService	alias"
			]
		]
	},
	"buffers":
	[
		{
			"file": "realTest.py",
			"settings":
			{
				"buffer_size": 42448,
				"line_ending": "Windows"
			}
		},
		{
			"file": "demoCourse.py",
			"settings":
			{
				"buffer_size": 5982,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "import datetime\nimport traceback\nimport requests\n\nfrom models import College, Course, Profile\nfrom models import Response, FeedCourseResponse, CourseListResponse, FeedResponse\nfrom models import TTCourseResponse, TimeTableResponse, StudentResponse\nfrom models import StudentListResponse, Assignment, Exam, CourseResponse\nfrom models import GetAssignmentResponse, GetExamResponse, Notes, NoteBook\nfrom models import NotesResponse, NoteBookDetailResponse, NoteBookListResponse\nfrom models import NoteBookResponse, CoursePageResponse, AssExamResponse\nfrom models import AssignmentResponse, ExamResponse, GetAssListResponse\nfrom models import GetExamListResponse, CollegeListResponse, CollegeDetails\nfrom models import BookmarkResponse, Notification, NotificationResponse\nfrom models import NotificationList, BranchListResponse, CollegeRequestModel\nfrom models import Report\nfrom searchAPI import createNBDoc\nfrom FCM import sendNotification, sendNotificationSingle\nfrom sendEmail import sendEmail\nfrom sparkpost import SparkPost\nfrom config import CLG_STATS_TIME, NOTIFICATION_TIME\n\nfrom google.appengine.ext import ndb\nfrom google.appengine.api import search\nfrom google.appengine.api import memcache\n\n\nnoteBookOpened = set()\nassignmentOpened = set()\nexamOpened = set()\n\n\ndef createCollegeMethod(request):\n    \"\"\"createCollegeMethod(request)\n    request (collegeName, abbreviation, location, collegeType, semStartDate,\n    semEndDate, branchNameList)\n    To create New college\"\"\"\n    newCollege = College()\n    try:\n        setattr(newCollege, 'collegeName', getattr(request, 'collegeName'))\n        setattr(newCollege, 'abbreviation', getattr(request, 'abbreviation'))\n        setattr(newCollege, 'location', getattr(request, 'location'))\n        setattr(newCollege, 'collegeType', getattr(request, 'collegeType'))\n        setattr(newCollege, 'semStartDate', getattr(request, 'semStartDate'))\n        setattr(newCollege, 'semEndDate', getattr(request, 'semEndDate'))\n        branchNameList = set(getattr(request, 'branchNameList'))\n        setattr(newCollege, 'branchNameList', list(branchNameList))\n    except Exception, E:\n        print str(E)\n        traceback.print_stack()\n        return Response(response=1, description=str(E))\n    # To find college with same name and location\n    queryString = ndb.AND(College.collegeName == newCollege.collegeName,\n                          College.location == newCollege.location)\n    collegeSameDetails = College.query(queryString).fetch()\n    if collegeSameDetails:\n        print \"College already exists\"\n        return Response(response=2, description=\"College Already Exists\")\n    else:\n        key = newCollege.put()\n        memcache.add(key.urlsafe(), 0, CLG_STATS_TIME)\n        memcache.add('stu' + key.urlsafe(), 0, CLG_STATS_TIME)\n        return Response(response=0, description=\"OK\", key=key.urlsafe())\n\n\ndef createProfileMethod(request):\n    \"\"\"createProfileMethod(request)\n        request (collegeId, profileName, batchName, branchName, sectionName, photoUrl,\n        gcmId, email)\n        Creates a new profile\"\"\"\n    try:\n        collegeId = ndb.Key(urlsafe=getattr(request, 'collegeId'))\n    except Exception:\n        return Response(response=1, description=\"No such collegeId\")\n    newProfile = Profile()\n    try:\n        setattr(newProfile, 'profileName', getattr(request, 'profileName'))\n        setattr(newProfile, 'collegeId', collegeId)\n        setattr(newProfile, 'batchName', getattr(request, 'batchName'))\n        setattr(newProfile, 'branchName', getattr(request, 'branchName'))\n        setattr(newProfile, 'sectionName', getattr(request, 'sectionName'))\n        setattr(newProfile, 'photoUrl', getattr(request, 'photoUrl'))\n        setattr(newProfile, 'email', getattr(request, 'email'))\n        setattr(newProfile, 'gcmId', getattr(request, 'gcmId'))\n        setattr(newProfile, 'dob', getattr(request, 'dob'))\n    except Exception, E:\n        print str(E)\n        traceback.print_stack()\n        return Response(response=1, description=str(E))\n    # Query for compatible courses and stores in availableCourseIds\n    availableCourseIds = set()\n    queryString = ndb.AND(Course.collegeId == collegeId,\n                          Course.batchNames == newProfile.batchName,\n                          Course.branchNames == newProfile.branchName,\n                          Course.sectionNames == newProfile.sectionName)\n    for course in Course.query(queryString).fetch():\n        availableCourseIds.add(course.key)\n    college = collegeId.get()\n    # To get existing profiles (if any) with same email id\n    profileCheck = Profile.query(Profile.email == newProfile.email).fetch()\n    if college is None:\n        print \"No such college ID\"\n        return Response(response=1, description=\"No such college ID\")\n    elif profileCheck:\n        print \"Profile already registered\"\n        return Response(response=2, description=\"Profile already registered\")\n    else:\n        setattr(newProfile, 'collegeId', collegeId)\n        setattr(newProfile, 'availableCourseIds', list(availableCourseIds))\n        demoCourse = Course.query(Course.courseName==\"Demo Course\").get()\n        if demoCourse is not None:\n            subscribedCourseIds = set()\n            subscribedCourseIds.add(demoCourse.key)\n            setattr(newProfile,'subscribedCourseIds',list(subscribedCourseIds))\n        # increasing the studentCount in college\n        memcache.incr('stu' + collegeId.urlsafe())\n        college.studentCount += 1\n        college.put()\n        key = newProfile.put()\n        memcache.add(key.urlsafe(), 0, NOTIFICATION_TIME)\n        return Response(response=0, description=\"OK\", key=key.urlsafe())\n\n\ndef addCourseMethod(request):\n    \"\"\"addCourseMethod(request)\n    request(POST) (courseName, collegeId, batchName, sectionName,\n    semester, adminId, startTime, endTime, proffessorName)\n    creates a new course and adds it to the college\"\"\"\n    try:\n        collegeId = ndb.Key(urlsafe=(getattr(request, 'collegeId')))\n        college = collegeId.get()\n        if college is None:\n            raise Exception(\"Invalid collegeId\")\n    except Exception, E:\n        print str(E)\n        return Response(response=1, description=str(E))\n    try:\n        profileId = ndb.Key(urlsafe=getattr(request, 'profileId'))\n        profile = profileId.get()\n        if profile is None:\n            raise Exception(\"Invalid profileId\")\n    except Exception:\n        print str(E)\n        return Response(response=1, description=str(E))\n    newCourse = Course()\n    # storing details\n    setattr(newCourse, 'courseName', getattr(request, 'courseName'))\n    setattr(newCourse, 'batchNames', list(set(getattr(request, 'batchNames'))))\n    setattr(newCourse, 'branchNames', list(set(getattr(request, 'branchNames'))))\n    setattr(newCourse, 'sectionNames', list(set(getattr(request, 'sectionNames'))))\n    setattr(newCourse, 'semester', getattr(request, 'semester'))\n    setattr(newCourse, 'startTime', getattr(request, 'startTime'))\n    setattr(newCourse, 'endTime', getattr(request, 'endTime'))\n    setattr(newCourse, 'professorName', getattr(request, 'professorName'))\n    setattr(newCourse, 'colour', getattr(request, 'colour'))\n    setattr(newCourse, 'courseCode', getattr(request, 'courseCode'))\n    setattr(newCourse, 'date', getattr(request, 'date'))\n    setattr(newCourse, 'elective', getattr(request, 'elective'))\n    # adding profileId to course.adminIds\n    adminIds = set()\n    adminIds.add(profileId)\n    # adding profileId to course.studentIds\n    studentIds = set()\n    studentIds.add(profileId)\n\n    setattr(newCourse, 'collegeId', collegeId)\n    setattr(newCourse, 'adminIds', list(adminIds))\n    setattr(newCourse, 'studentIds', list(studentIds))\n\n    # To check if same course already exists\n    queryString = ndb.AND(Course.courseCode == newCourse.courseCode,\n                          Course.collegeId == collegeId,\n                          Course.sectionNames.IN(list(set(newCourse.sectionNames))),\n                          Course.branchNames.IN(list(set(newCourse.branchNames))),\n                          Course.batchNames.IN(list(set(newCourse.batchNames))),\n                          Course.professorName == newCourse.professorName)\n    coursesWithSameCode = Course.query(queryString).fetch()\n    if coursesWithSameCode:\n        print \"Course already exists\"\n        return Response(response=2, description=\"Course already exists\")\n\n    courseId = newCourse.put()\n    # Adding courseId to admin.subscribedCourseIds\n    for pId in adminIds:\n        p = pId.get()\n        subscribedCourseIds = set(p.subscribedCourseIds)\n        subscribedCourseIds.add(courseId)\n        p.subscribedCourseIds = list(subscribedCourseIds)\n        p.put()\n\n    # Adding courseId to college.courseIds\n    courseIds = set(college.courseIds)\n    courseIds.add(courseId)\n    college.courseIds = list(courseIds)\n    college.put()\n\n    # Adding courseId to profile.administeredCourseIds\n    administeredCourseIds = set(profile.administeredCourseIds)\n    administeredCourseIds.add(courseId)\n    profile.administeredCourseIds = list(administeredCourseIds)\n    profile.put()\n\n    # To update the availableCourseIds of users\n    queryString = ndb.AND(Profile.collegeId == collegeId,\n                          Profile.batchName.IN(newCourse.batchNames),\n                          Profile.branchName.IN(newCourse.branchNames),\n                          Profile.sectionName.IN(newCourse.sectionNames))\n    profilesToUpdate = Profile.query(queryString).fetch()\n    for p in profilesToUpdate:\n        if p.key != profileId:\n            availableCourseIds = set(p.availableCourseIds)\n            availableCourseIds.add(courseId)\n            p.availableCourseIds = list(availableCourseIds)\n            p.put()\n    return Response(response=0, description=\"OK\", key=courseId.urlsafe())\n\n\ndef subscribeCourseMethod(request):\n    \"\"\"subscribeCourseMethod(request)\n       request (profileId, courseIds)\n       Subscribes the profileId to a list of courseIds\"\"\"\n    try:\n        profileId = ndb.Key(urlsafe=getattr(request, 'profileId'))\n        profile = profileId.get()\n        if profile is None:\n            raise Exception(\"Invalid profileId\")\n    except Exception, E:\n        print str(E)\n        return Response(response=1, description=str(E))\n    courseIdList = getattr(request, 'courseIds')\n    courseIds = set()\n    # Adding courseId to profile.subscribedCourseIds\n    for urlsafeKey in courseIdList:\n        try:\n            courseId = ndb.Key(urlsafe=urlsafeKey)\n            course = courseId.get()\n            if course is None:\n                raise Exception(\"Invalid courseId\")\n        except Exception, E:\n            print str(E)\n            return Response(response=1, description=str(E))\n\n        # adding courseId to profile.subscribedCourseId\n        subscribedCourseIds = set(profile.subscribedCourseIds)\n        subscribedCourseIds.add(courseId)\n        profile.subscribedCourseIds = subscribedCourseIds\n        courseIds.add(courseId)\n        cacheVal = memcache.get(courseId.urlsafe())\n        if cacheVal is not None:\n            studentIds = set(cacheVal[13])\n            studentIds.add(profileId)\n            cacheVal[13] = list(studentIds)\n            cacheVal[9] += 1\n            memcache.set(courseId.urlsafe(), cacheVal)\n\n    # adding profileId to course.studentIds\n    courseCodes = []\n    for courseId in courseIds:\n        course = courseId.get()\n        courseCodes.append(course.courseCode)\n        studentIds = set(course.studentIds)\n        studentIds.add(profileId)\n        course.studentIds = list(studentIds)\n        course.put()\n    # Removing courses with same courseCode from profile.availableCourseIds\n    coursesWithSameCode = Course.query(Course.courseCode.IN(courseCodes))\n    coursesWithSameCode = coursesWithSameCode.fetch()\n    for course in coursesWithSameCode:\n        courseId = course.key\n        availableCourseIds = set(profile.availableCourseIds)\n        availableCourseIds.discard(courseId)\n        profile.availableCourseIds = list(availableCourseIds)\n    profile.put()\n    return Response(response=0, description=\"OK\")\n\n\ndef courseListMethod(request):\n    \"\"\"courseList(request)\n       request (profileId) OR request(courseIds[])\n       to get the list of courses\"\"\"\n    profileIdUrlSafe = getattr(request, 'profileId', None)\n    courseIdsUrlSafe = getattr(request, 'courseIds', None)\n    if not profileIdUrlSafe and not courseIdsUrlSafe:\n        print \"BAD REQUEST\"\n        return CourseListResponse(response=1, description=\"Bad Request\")\n    else:\n        courseListResponse = []\n        if profileIdUrlSafe:\n            try:\n                profileId = ndb.Key(urlsafe=profileIdUrlSafe)\n                profile = profileId.get()\n                if profile is None:\n                    raise Exception(\"Invalid profileId\")\n            except Exception, E:\n                print str(E)\n                return CourseListResponse(response=1, description=str(E))\n            for courseId in profile.availableCourseIds:\n                course = courseId.get()\n                if course is None:\n                    print \"Invalid courseId\"\n                    return CourseListResponse(response=1, description=\"Invalid courseId\")\n                notesCount = len(course.noteBookIds)\n                studentCount = len(course.studentIds)\n                feedCourseResponse = CourseResponse(courseId=courseId.urlsafe(),\n                                                    courseName=course.courseName,\n                                                    batchNames=course.batchNames,\n                                                    branchNames=course.branchNames,\n                                                    sectionNames=course.sectionNames,\n                                                    semester=course.semester,\n                                                    studentCount=studentCount,\n                                                    professorName=course.professorName,\n                                                    notesCount=notesCount,\n                                                    colour=course.colour,\n                                                    elective=course.elective)\n                courseListResponse.append(feedCourseResponse)\n            return CourseListResponse(response=0, description=\"OK\",\n                                      courseList=courseListResponse,\n                                      completed=0)\n        else:\n            for courseIdUrlsafe in courseIdsUrlSafe:\n                try:\n                    courseId = ndb.Key(urlsafe=courseIdUrlsafe)\n                    course = courseId.get()\n                    if course is None:\n                        raise Exception(\"Invalid courseId\")\n                except Exception:\n                    print str(E)\n                    return CourseListResponse(response=1, description=str(E))\n                notesCount = len(course.noteBookIds)\n                studentCount = len(course.studentIds)\n                feedCourseResponse = CourseResponse(courseId=courseId.urlsafe(),\n                                                    courseName=course.courseName,\n                                                    batchNames=course.batchNames,\n                                                    branchNames=course.branchNames,\n                                                    sectionNames=course.sectionNames,\n                                                    studentCount=studentCount,\n                                                    professorName=course.professorName,\n                                                    notesCount=notesCount,\n                                                    semester=course.semester,\n                                                    colour=course.colour,\n                                                    elective=course.elective)\n                courseListResponse.append(feedCourseResponse)\n            return CourseListResponse(response=0, description=\"OK\",\n                                      courseList=courseListResponse,\n                                      completed=0)\n\n\ndef feedMethod(request):\n    \"\"\"feedMethod(request)\n       request (profileId)\n       To get the home page feed of the user\"\"\"\n    try:\n        profileId = ndb.Key(urlsafe=getattr(request, 'profileId'))\n        profile = profileId.get()\n        if profile is None:\n            raise Exception(\"Invalid profileId\")\n    except Exception, E:\n        print str(E)\n        return FeedResponse(response=1, description=str(E))\n    profileName = profile.profileName\n    points = profile.points\n    photoUrl = profile.photoUrl\n    availableCourseIds = profile.availableCourseIds\n    subscribedCourseIds = profile.subscribedCourseIds\n    try:\n        availableCourseList = feedCourseResponse(availableCourseIds)\n    except Exception, E:\n        print str(E)\n        print traceback.print_stack()\n        return FeedResponse(response=1, description='in availableCourses ' + str(E))\n    try:\n        subscribedCourseList = feedCourseResponse(subscribedCourseIds)\n    except Exception, E:\n        print str(E)\n        print traceback.print_stack()\n        return FeedResponse(response=1, description='in subscribedCourses ' + str(E))\n    collegeId = profile.collegeId\n    numNotification = memcache.get('notif' + profileId.urlsafe())\n    if numNotification is None:\n        memcache.add('notif' + profileId.urlsafe(), 0, NOTIFICATION_TIME)\n        numNotification = 0\n    return FeedResponse(response=0, description=\"OK\", profileName=profileName,\n                        points=points, photoUrl=photoUrl,\n                        availableCourseList=availableCourseList,\n                        subscribedCourseList=subscribedCourseList,\n                        collegeId=collegeId.urlsafe(),\n                        newNotifications=str(numNotification))\n\n\ndef feedCourseResponse(courseIds):\n    \"\"\"feedCourseResponse(courseIds[])\n        To get the course details for home page feed\"\"\"\n    responseList = []\n    td = datetime.datetime.now() + datetime.timedelta(hours=5, minutes=30)\n    curDate = td.date()\n    curTime = td.time()\n    for courseId in courseIds:\n        dueAssignments, dueExams, recentNotes = 0, 0, 0\n        course = courseId.get()\n        if course is None:\n            print \"Invalid courseId\"\n            continue\n        assignmentIds = course.assignmentIds\n        for assignmentId in assignmentIds:\n            assignment = assignmentId.get()\n            try:\n                if assignment is None:\n                    continue\n                a = assignment.dueDate\n                date, month, year = int(a[0:2]), int(a[3:5]), int(a[6:10])\n                dueDate = datetime.date(year, month, date)\n                if(curDate > dueDate):\n                    continue\n                a = assignment.dueTime\n                hour, minute = int(a[0:2]), int(a[3:5])\n                dueTime = datetime.time(hour, minute)\n                if(curDate == dueDate and dueTime < curTime):\n                    continue\n                dueAssignments = dueAssignments + 1\n            except:\n                print \"assignmentdate parse error\"\n        examIds = course.examIds\n        for examId in examIds:\n            exam = examId.get()\n            try:\n                if exam is None:\n                    continue\n                a = exam.dueDate\n                date, month, year = int(a[0:2]), int(a[3:5]), int(a[6:10])\n                dueDate = datetime.date(year, month, date)\n                if(curDate > dueDate):\n                    continue\n                a = exam.dueTime\n                hour, minute = int(a[0:2]), int(a[3:5])\n                dueTime = datetime.time(hour, minute)\n                if(curDate == dueDate and dueTime < curTime):\n                    continue\n                dueExams = dueExams + 1\n            except:\n                print \"Examdate parse error\"\n        noteBookIds = course.noteBookIds\n        for noteBookId in noteBookIds:\n            noteBook = noteBookId.get()\n            if noteBook is None:\n                continue\n            a = str(noteBook.lastUpdated)\n            date, month, year = int(a[8:10]), int(a[5:7]), int(a[0:4])\n            lastUpdated = datetime.date(year, month, date)\n            if(curDate - lastUpdated).days > 7:\n                continue\n            recentNotes = recentNotes + 1\n        responseList.append(FeedCourseResponse(courseId=courseId.urlsafe(),\n                                               courseName=course.courseName,\n                                               dueAssignments=dueAssignments,\n                                               dueExams=dueExams, date=course.date,\n                                               startTime=course.startTime,\n                                               endTime=course.endTime,\n                                               colour=course.colour,\n                                               recentNotes=recentNotes,\n                                               professorName=course.professorName,\n                                               elective=course.elective,\n                                               courseCode=course.courseCode))\n    return responseList\n\n\ndef addAdminMethod(request):\n    \"\"\"addAdmin(request)\n       request (courseId, profileId)\n       to make a new Admin\"\"\"\n    try:\n        courseId = ndb.Key(urlsafe=getattr(request, 'courseId'))\n        course = courseId.get()\n        if course is None:\n            raise Exception(\"Invalid courseId\")\n        notifTitle = course.courseName\n    except Exception, E:\n        print str(E)\n        return Response(response=1, description=str(E))\n    try:\n        profileId = ndb.Key(urlsafe=getattr(request, 'profileId'))\n        profile = profileId.get()\n        if profile is None:\n            raise Exception(\"Invalid profileId\")\n    except Exception, E:\n        print str(E)\n        return Response(response=1, description=str(E))\n\n    print profile, course\n    if courseId not in profile.administeredCourseIds:\n        print \"Here\"\n        # profile is not the admin\n        administeredCourseIds = set(profile.administeredCourseIds)\n        administeredCourseIds.add(courseId)\n        profile.administeredCourseIds = list(administeredCourseIds)\n        adminIds = set(course.adminIds)\n        adminIds.add(profileId)\n        course.adminIds = list(adminIds)\n        print course\n        # creating notification\n        notifText = 'You have been made the admin of ' + course.courseName\n        createNotification([profileId], 'Campus Connect', notifText, 'admin', courseId=courseId.urlsafe())\n        # adding admin to memcache\n        cacheVal = memcache.get(courseId.urlsafe())\n        if cacheVal is not None:\n            cv = set(cacheVal[19])\n            cv.add(profileId)\n            cacheVal[19] = list(cv)\n            memcache.set(courseId.urlsafe(), cacheVal)\n        availableCourseIds = set(profile.availableCourseIds)\n        availableCourseIds.discard(courseId)\n        profile.availableCourseIds = list(availableCourseIds)\n    else:\n        # profile is already the admin\n        administeredCourseIds = set(profile.administeredCourseIds)\n        administeredCourseIds.discard(courseId)\n        profile.administeredCourseIds = list(administeredCourseIds)\n        adminIds = set(course.adminIds)\n        adminIds.discard(profileId)\n        course.adminIds = list(adminIds)\n\n        # setting in memcache\n        cacheVal = memcache.get(courseId.urlsafe())\n        if cacheVal is not None:\n            cv = set(cacheVal[19])\n            cv.discard(profileId)\n            cacheVal[19] = cv\n            memcache.set(courseId.urlsafe(), cacheVal)\n    course.put()\n    profile.put()\n\n    # sending downstream FCM notification\n\n    if profile.gcmId is not None:\n        sendNotificationSingle(profile.gcmId, 'admin', notifTitle, notifText)\n\n    return Response(response=0, description=\"OK\")\n\n\ndef timeTableMethod(request):\n    \"\"\"timeTableMethod(request)\n       request (profileId)\n       To get the timetable of all the subscribe courses of user\"\"\"\n    try:\n        profileId = ndb.Key(urlsafe=getattr(request, 'profileId'))\n        profile = profileId.get()\n        if profile is None:\n            raise Exception(\"Invalid profileId\")\n    except Exception, E:\n        print str(E)\n        return TimeTableResponse(response=1, description=str(E))\n    subscribedCourseIds = profile.subscribedCourseIds\n    print profile\n    courseList = []\n    print subscribedCourseIds\n    for courseId in subscribedCourseIds:\n        course = courseId.get()\n        courseList.append(TTCourseResponse(courseName=course.courseName,\n                                           colour=course.colour,\n                                           courseId=courseId.urlsafe(),\n                                           date=course.date,\n                                           startTime=course.startTime,\n                                           endTime=course.endTime))\n    return TimeTableResponse(response=0, description=\"OK\",\n                             courseList=courseList)\n\n\ndef studentListMethod(request):\n    \"\"\"studentListMethod(request)\n       request (profileId, courseId)\n       To get the list of students subscribed to the course\"\"\"\n    try:\n        profileId = ndb.Key(urlsafe=request.profileId)\n        profile = profileId.get()\n        if profile is None:\n            raise Exception(\"Invalid profileId\")\n    except Exception, E:\n        print str(E)\n        return StudentListResponse(response=1, description=str(E))\n    try:\n        courseId = ndb.Key(urlsafe=request.courseId)\n        course = courseId.get()\n        if course is None:\n            raise Exception(\"Invalid courseId\")\n    except Exception, E:\n        print str(E)\n        return StudentListResponse(response=1, description=str(E))\n\n    # setting whether current user is admin\n    if courseId in profile.administeredCourseIds:\n        isAdmin = 1\n    else:\n        isAdmin = 0\n\n    # creating the list of profile\n    studentList = []\n    print course\n    print course.adminIds\n    for studentId in course.studentIds:\n        # whether the student is admin\n        if studentId in course.adminIds:\n            isAdmin2 = 1\n        else:\n            isAdmin2 = 0\n        student = studentId.get()\n        if student is None:\n            continue\n        studentList.append(StudentResponse(profileId=studentId.urlsafe(),\n                                           profileName=student.profileName,\n                                           photoUrl=student.photoUrl,\n                                           isAdmin=isAdmin2))\n    return StudentListResponse(response=0, description=\"OK\", isAdmin=isAdmin,\n                               studentList=studentList)\n\n\ndef createAssignmentMethod(request):\n    \"\"\"createAssignmentMethod(request)\n       request (assignmentTitle, assignmentDesc, dateUploaded, courseId, uploaderId,\n                dueDate, dueTime, urlList)\"\"\"\n    try:\n        courseId = ndb.Key(urlsafe=getattr(request, 'courseId'))\n        course = courseId.get()\n        if course is None:\n            raise Exception(\"Invalid courseId\")\n    except Exception, E:\n        print str(E)\n        return Response(response=1, description=str(E))\n    try:\n        uploaderId = ndb.Key(urlsafe=getattr(request, 'uploaderId'))\n        uploader = uploaderId.get()\n        if uploader is None:\n            raise Exception(\"Invalid uploaderId\")\n    except Exception, E:\n        print str(E)\n        return Response(response=1, description=str(E))\n\n    newAssignment = Assignment()\n\n    # storing the details\n    setattr(newAssignment, 'assignmentTitle', getattr(request, 'assignmentTitle'))\n    setattr(newAssignment, 'assignmentDesc', getattr(request, 'assignmentDesc'))\n    setattr(newAssignment, 'dueDate', getattr(request, 'dueDate'))\n    setattr(newAssignment, 'dueTime', getattr(request, 'dueTime'))\n    setattr(newAssignment, 'urlList', getattr(request, 'urlList'))\n\n    dateUploaded = str(datetime.datetime.now() + datetime.timedelta(hours=5, minutes=30))\n    setattr(newAssignment, 'courseId', courseId)\n    setattr(newAssignment, 'uploaderId', uploaderId)\n    setattr(newAssignment, 'dateUploaded', dateUploaded)\n    assignmentId = newAssignment.put()\n\n    # adding assignmentId to course.assignmentIds\n    course.assignmentIds.append(assignmentId)\n    course.put()\n\n    # deleting the cached value\n    memcache.delete(courseId.urlsafe())\n\n    # Sending Notification to subscribed profiles\n    title = course.courseName\n    notificationText = \"New assignment added!\"\n    createNotification(course.studentIds, 'Campus Connect',\n                       notificationText, 'assignment',\n                       assignmentId.urlsafe(), courseId.urlsafe())\n    sendNotification(topicName=courseId.urlsafe(), id=assignmentId.urlsafe(), title=title,\n                     text=notificationText, type='assignment')\n    return Response(response=0, description=\"OK\", key=assignmentId.urlsafe())\n\n\ndef createExamMethod(request):\n    \"\"\"createExamMethod(request)\n       request (examTitle, examDesc, dateUploaded, courseId, profileId, dueDate,\n                dueTime, urlList)\n       To create a new exam\"\"\"\n    try:\n        courseId = ndb.Key(urlsafe=getattr(request, 'courseId'))\n        course = courseId.get()\n        if course is None:\n            raise Exception(\"Invalid courseId\")\n    except Exception, E:\n        print str(E)\n        return Response(response=1, description=str(E))\n    try:\n        uploaderId = ndb.Key(urlsafe=getattr(request, 'uploaderId'))\n        uploader = uploaderId.get()\n        if uploader is None:\n            raise Exception(\"Invalid uploaderId\")\n    except Exception, E:\n        print str(E)\n        return Response(response=1, description=str(E))\n\n    newExam = Exam()\n    # storing details\n    setattr(newExam, 'examTitle', getattr(request, 'examTitle'))\n    setattr(newExam, 'examDesc', getattr(request, 'examDesc'))\n    setattr(newExam, 'dueDate', getattr(request, 'dueDate'))\n    setattr(newExam, 'dueTime', getattr(request, 'dueTime'))\n    setattr(newExam, 'urlList', getattr(request, 'urlList'))\n\n    dateUploaded = str(datetime.datetime.now() + datetime.timedelta(hours=5, minutes=30))\n    setattr(newExam, 'uploaderId', uploaderId)\n    setattr(newExam, 'courseId', courseId)\n    setattr(newExam, 'dateUploaded', dateUploaded)\n    examId = newExam.put()\n\n    # adding examId to course.examIds\n    course.examIds.append(examId)\n    course.put()\n\n    # deleting from memcache\n    memcache.delete(courseId.urlsafe())\n\n    # sending notification\n    title = course.courseName\n    notificationText = \"New Exam added!\"\n    createNotification(course.studentIds, 'Campus Connect',\n                       notificationText, 'exam',\n                       examId.urlsafe(), courseId.urlsafe())\n    sendNotification(topicName=courseId.urlsafe(), id=examId.urlsafe(), title=title,\n                     text=notificationText, type='exam')\n    return Response(response=0, description=\"OK\", key=examId.urlsafe())\n\n\ndef getAssignmentMethod(request):\n    \"\"\"getAssignmentMethod(request)\n       request (profileId, assignmentId)\"\"\"\n    try:\n        profileId = ndb.Key(urlsafe=getattr(request, 'profileId'))\n    except Exception, E:\n        print str(E)\n        return GetAssignmentResponse(response=1, description=str(E))\n    try:\n        assignmentId = ndb.Key(urlsafe=getattr(request, 'assignmentId'))\n    except Exception, E:\n        print str(E)\n        return GetAssignmentResponse(response=1, description=str(E))\n\n    # to add the views in crons\n    assignmentOpened.add(assignmentId.urlsafe())\n\n    # fetching from memcache\n    cacheVal = memcache.get(assignmentId.urlsafe())\n    memViews = memcache.get('views' + assignmentId.urlsafe())\n    if cacheVal is not None:\n        # if the current user is author\n        if profileId == cacheVal[8]:\n            isAuthor = 1\n        else:\n            isAuthor = 0\n        if memViews is None:\n            assignment = assignmentId.get()\n            if assignment is None:\n                print \"Invalid assignmentId\"\n                return GetAssignmentResponse(response=1, description=\"Invalid assignmentId\")\n            memViews = assignment.assignmentViews\n            memcache.add('views' + assignmentId.urlsafe(), memViews, 86400)\n        if isAuthor == 0:\n            memcache.incr('views' + assignmentId.urlsafe())\n        views = memcache.get('views' + assignmentId.urlsafe())\n        return GetAssignmentResponse(response=0, description=\"OK\",\n                                     isAuthor=isAuthor,\n                                     assignmentTitle=cacheVal[0],\n                                     assignmentDesc=cacheVal[1],\n                                     lastUpdated=cacheVal[2],\n                                     uploaderName=cacheVal[3],\n                                     dueDate=cacheVal[4],\n                                     dueTime=cacheVal[5],\n                                     urlList=cacheVal[6],\n                                     courseName=cacheVal[7],\n                                     views=views)\n    assignment = assignmentId.get()\n    if assignment is None:\n        print \"Invalid assignmentId\"\n        return GetAssignmentResponse(response=1, description=\"Invalid assignmentId\")\n    if profileId == assignment.uploaderId:\n        isAuthor = 1\n    else:\n        isAuthor = 0\n    uploaderName = assignment.uploaderId.get().profileName\n    course = assignment.courseId.get()\n    assignment.put()\n    fields = [assignment.assignmentTitle, assignment.assignmentDesc, assignment.dateUploaded,\n              uploaderName, assignment.dueDate, assignment.dueTime, assignment.urlList,\n              course.courseName, assignment.uploaderId]\n    memcache.add(assignmentId.urlsafe(), fields, 86400)\n    if memcache.get('views' + assignmentId.urlsafe()) is None:\n        if isAuthor == 0:\n            memcache.add('views' + assignmentId.urlsafe(), assignment.assignmentViews + 1, 86400)\n        else:\n            memcache.add('views' + assignmentId.urlsafe(), assignment.assignmentViews, 86400)\n    else:\n        if isAuthor == 0:\n            memcache.incr('views' + assignmentId.urlsafe())\n    views = memcache.get('views' + assignmentId.urlsafe())\n    return GetAssignmentResponse(response=0, description=\"OK\",\n                                 isAuthor=isAuthor,\n                                 views=views,\n                                 assignmentTitle=fields[0],\n                                 assignmentDesc=fields[1],\n                                 lastUpdated=fields[2],\n                                 uploaderName=fields[3],\n                                 dueDate=fields[4],\n                                 dueTime=fields[5],\n                                 urlList=fields[6],\n                                 courseName=fields[7])\n\n\ndef getExamMethod(request):\n    \"\"\"getExamMethod(request)\n       request (profileId, examId)\"\"\"\n    try:\n        profileId = ndb.Key(urlsafe=getattr(request, 'profileId'))\n    except Exception:\n        print \"Invalid profileId\"\n        return GetExamResponse(response=1, description=\"Invalid profileId\")\n    try:\n        examId = ndb.Key(urlsafe=getattr(request, 'examId'))\n    except Exception:\n        print \"Invalid courseId\"\n        return GetExamResponse(response=1, description=\"Invalid examId\")\n\n    # to add the views in cron\n    examOpened.add(examId.urlsafe())\n\n    # fetching from memcache\n    cacheVal = memcache.get(examId.urlsafe())\n    memViews = memcache.get('views' + examId.urlsafe())\n    if cacheVal is not None:\n        if profileId == cacheVal[8]:\n            isAuthor = 1\n        else:\n            isAuthor = 0\n        if memViews is None:\n            exam = examId.get()\n            if exam is None:\n                print \"Invalid examId\"\n                return GetExamResponse(response=1, description=\"Invalid examId\")\n            memViews = exam.examViews\n            memcache.add('views' + examId.urlsafe(), memViews, 86400)\n        if isAuthor == 0:\n            memcache.incr('views' + examId.urlsafe())\n        views = memcache.get('views' + examId.urlsafe())\n        return GetExamResponse(response=0, description=\"OK\",\n                               isAuthor=isAuthor, examTitle=cacheVal[0],\n                               examDesc=cacheVal[1], lastUpdated=cacheVal[2],\n                               uploaderName=cacheVal[3], dueDate=cacheVal[4],\n                               dueTime=cacheVal[5], urlList=cacheVal[6],\n                               courseName=cacheVal[7], views=views)\n    exam = examId.get()\n    if exam is None:\n        print \"Invalid examId\"\n        return GetExamResponse(response=1, description=\"Invalid examId\")\n    if profileId == exam.uploaderId:\n        isAuthor = 1\n    else:\n        isAuthor = 0\n    uploaderName = exam.uploaderId.get().profileName\n    exam.put()\n    course = exam.courseId.get()\n    fields = [exam.examTitle, exam.examDesc, exam.dateUploaded, uploaderName,\n              exam.dueDate, exam.dueTime, exam.urlList, course.courseName,\n              exam.uploaderId]\n\n    if memcache.get('views' + examId.urlsafe()) is None:\n        if isAuthor == 0:\n            memcache.add('views' + examId.urlsafe(), exam.examViews + 1, 86400)\n        else:\n            memcache.add('views' + examId.urlsafe(), exam.examViews, 86400)\n    else:\n        if isAuthor == 0:\n            memcache.incr('views' + examId.urlsafe())\n    memcache.add(examId.urlsafe(), fields, 86400)\n    views = memcache.get('views' + examId.urlsafe())\n    return GetExamResponse(response=0, description=\"OK\",\n                           isAuthor=isAuthor, views=views,\n                           examTitle=fields[0], examDesc=fields[1],\n                           lastUpdated=fields[2],\n                           uploaderName=fields[3], dueDate=fields[4],\n                           dueTime=fields[5], urlList=fields[6],\n                           courseName=fields[7])\n\n\ndef createNotesMethod(request):\n    \"\"\"createNotes(request)\n       request (profileId, date, urlList,notesDesc, classNumber, courseId, title)\n       To create new Notes\"\"\"\n    try:\n        profileId = ndb.Key(urlsafe=getattr(request, 'profileId'))\n        profile = profileId.get()\n        if profile is None:\n            raise Exception(\"Invalid profileId\")\n    except Exception, E:\n        print str(E)\n        return Response(response=1, description=str(E))\n    try:\n        courseId = ndb.Key(urlsafe=getattr(request, 'courseId'))\n    except Exception:\n        print \"Invalid courseId\"\n        return Response(response=1, description=\"Invalid courseId\")\n    memcache.incr(profile.collegeId.urlsafe())\n    if profile is None:\n        print \"Invalid profileId\"\n        return Response(response=1, description=\"Invalid profileId\")\n\n    newNotes = Notes()\n    # storing details\n    setattr(newNotes, 'date', getattr(request, 'date'))\n    setattr(newNotes, 'notesDesc', getattr(request, 'notesDesc'))\n    setattr(newNotes, 'title', getattr(request, 'title'))\n    setattr(newNotes, 'urlList', getattr(request, 'urlList'))\n    print newNotes\n    # CHECKS IF NOTEBOOK WITH SAME profileID AND courseId already exists\n    query = NoteBook.query(ndb.AND(NoteBook.courseId == courseId,\n                                   NoteBook.uploaderId == profileId))\n    noteBookResult = query.fetch()\n    if noteBookResult:\n        # noteBook exists\n        for noteBook in noteBookResult:\n            setattr(newNotes, 'classNumber', str(len(noteBook.notesIds) + 1))\n            try:\n                addToNoteBook(noteBook.key, newNotes)\n            except Exception, E:\n                print str(E)\n                return Response(response=1, description=str(E))\n            createNBDoc(newNotes.title, newNotes.notesDesc,\n                        profile.profileName, noteBook.key.urlsafe())\n            return Response(response=0, description=\"OK\",\n                            key=noteBook.key.urlsafe())\n    else:\n        # new noteBook to be created\n        try:\n            setattr(newNotes, 'classNumber', str(1))\n            noteBookId = createNoteBook(profileId, courseId)\n            addToNoteBook(noteBookId, newNotes)\n        except Exception, E:\n            print str(E)\n            return Response(response=1, description=str(E))\n        createNBDoc(newNotes.title, newNotes.notesDesc,\n                    profile.profileName, noteBookId.urlsafe())\n        return Response(response=0, description=\"OK\", key=noteBookId.urlsafe())\n\n\ndef createNoteBook(profileId, courseId):\n    \"\"\"createNoteBook(profileId, courseId)\n       To create new noteBook\"\"\"\n    lastUpdated = str(datetime.datetime.now() + datetime.timedelta(hours=5, minutes=30))\n    newNoteBook = NoteBook(courseId=courseId, uploaderId=profileId, lastUpdated=lastUpdated)\n    course = courseId.get()\n    if course is None:\n        raise Exception(\"Invalid courseId\")\n    college = course.collegeId.get()\n    if college is None:\n        raise Exception(\"Invalid collegeId\")\n    college.noteBookCount += 1\n    profile = profileId.get()\n    if profile is None:\n        raise Exception(\"Invalid profileId\")\n    noteBookId = newNoteBook.put()\n    profile.uploadedNoteBookIds.append(noteBookId)\n    college.put()\n    profile.put()\n    course.noteBookIds.append(noteBookId)\n    course.put()\n    return noteBookId\n\n\ndef addToNoteBook(noteBookId, newNotes):\n    \"\"\"addToNoteBook(noteBookId, newNotes)\n       To add new notes to existing noteBook\"\"\"\n    newNotes.noteBookId = noteBookId\n    notesId = newNotes.put()\n    noteBook = noteBookId.get()\n    if noteBook is None:\n        raise Exception(\"Invalid noteBookId\")\n    bmUserList = noteBook.bmUserList\n    noteBook.notesIds.append(notesId)\n    noteBook.frequency += 1\n    notesList = []\n    pages = 0\n    for notesId in noteBook.notesIds:\n        notes = notesId.get()\n        if notes is None:\n            print \"Invalid notesId\"\n            continue\n        notesList.append(NotesResponse(title=notes.title,\n                                       description=notes.notesDesc,\n                                       date=notes.date,\n                                       classNumber=notes.classNumber,\n                                       urlList=notes.urlList))\n        pages += len(notes.urlList)\n    noteBook.lastUpdated = str(datetime.datetime.now() + datetime.timedelta(hours=5, minutes=30))\n    noteBookUploader = noteBook.uploaderId.get()\n    uploaderName = noteBookUploader.profileName\n    course = noteBook.courseId.get()\n    title = course.courseName + ': ' + uploaderName\n    cacheVal = memcache.get(noteBookId.urlsafe())\n    if cacheVal is not None:\n        cacheVal[2] = noteBook.lastUpdated\n        cacheVal[3] += 1\n        cacheVal[4] = pages\n        cacheVal[6] = notesList\n        memcache.set(noteBookId.urlsafe(), cacheVal)\n    noteBook.put()\n    notificationText = \"New notes added!\"\n    if len(noteBook.bmUserList) != 0:\n        print len(noteBook.bmUserList)\n        createNotification(bmUserList, 'Campus Connect', notificationText,\n                           'notes', noteBookId.urlsafe(), noteBook.courseId.urlsafe())\n    sendNotification(topicName=noteBookId.urlsafe(), id=noteBookId.urlsafe(),\n                     title=title, text=notificationText, type='notes')\n\n\ndef getNoteBook(request):\n    \"\"\"getNoteBook(request)\n       request (profileId, noteBookId)\n       To get noteBook\"\"\"\n    try:\n        profileId = ndb.Key(urlsafe=getattr(request, 'profileId'))\n    except Exception, E:\n        print \"Invalid profileId\\n\" + str(E)\n        return NoteBookDetailResponse(response=1, description=\"Invalid profileId\")\n    try:\n        noteBookId = ndb.Key(urlsafe=getattr(request, 'noteBookId'))\n    except Exception, E:\n        print \"Invalid noteBookId\\n\" + str(E)\n        return NoteBookDetailResponse(response=1, description=\"Invalid noteBookId\")\n    noteBookOpened.add(noteBookId.urlsafe())\n    cacheVal = memcache.get(noteBookId.urlsafe())\n    if cacheVal is not None:\n        memViews = memcache.get('views' + noteBookId.urlsafe())\n        if memViews is None:\n            noteBook = noteBookId.get()\n            memViews = noteBook.views\n            memcache.add('views' + noteBookId.urlsafe(), memViews, 86400)\n        noteBookOpened.add(noteBookId.urlsafe())\n        bmUserList = cacheVal[8]\n        if profileId in bmUserList:\n            bookmarkStatus = 1\n        else:\n            bookmarkStatus = 0\n        ratedUserList = cacheVal[9]\n        if profileId in ratedUserList:\n            for i in range(len(ratedUserList)):\n                if ratedUserList[i] == profileId:\n                    rated = cacheVal[10][i]\n        else:\n            rated = -1\n        if profileId == cacheVal[11]:\n            isAuthor = 1\n        else:\n            isAuthor = 0\n        if isAuthor == 0:\n            memcache.incr('views' + noteBookId.urlsafe())\n        views = memcache.get('views' + noteBookId.urlsafe())\n        return NoteBookDetailResponse(courseName=cacheVal[0],\n                                      isAuthor=isAuthor, uploaderName=cacheVal[1],\n                                      lastUpdated=cacheVal[2], views=memViews,\n                                      rated=rated, frequency=cacheVal[3],\n                                      pages=cacheVal[4], totalRating=cacheVal[5],\n                                      notes=cacheVal[6], bookmarkStatus=bookmarkStatus,\n                                      response=0, colour=cacheVal[7],\n                                      numUsersRated=str(len(cacheVal[9])),\n                                      description=\"OK\")\n\n    noteBook = noteBookId.get()\n    if noteBook is None:\n        print \"Invalid noteBookId\"\n        return NoteBookDetailResponse(response=1, description=\"Invalid noteBookId\")\n    if noteBook.uploaderId == profileId:\n        isAuthor = 1\n    else:\n        isAuthor = 0\n    profile = profileId.get()\n    if profile is None:\n        print \"Invalid profileId\"\n        return NoteBookDetailResponse(response=1, description=\"Invalid profileId\")\n    if noteBookId in profile.bookmarkedNoteBookIds:\n        bookmarkStatus = 1\n    else:\n        bookmarkStatus = 0\n    noteBookUploader = noteBook.uploaderId.get()\n    course = noteBook.courseId.get()\n    if course is None:\n        print \"Invalid courseId\"\n        return NoteBookDetailResponse(response=1, description=\"Invalid courseId\")\n    uploaderName = noteBookUploader.profileName\n    lastUpdated = noteBook.lastUpdated\n    views = noteBook.views\n    noteBook.put()\n    frequency = noteBook.frequency\n    totalRating = noteBook.totalRating\n    rated = -1\n    for i in range(len(noteBook.ratedUserIds)):\n        if noteBook.ratedUserIds[i] == profileId:\n            rated = noteBook.ratingList[i]\n    notesList = []\n    pages = 0\n    for notesId in noteBook.notesIds:\n        notes = notesId.get()\n        if notes is None:\n            return NoteBookDetailResponse(response=1, description=\"Invalid notesId\")\n        notesList.append(NotesResponse(title=notes.title,\n                                       description=notes.notesDesc,\n                                       date=notes.date,\n                                       classNumber=notes.classNumber,\n                                       urlList=notes.urlList))\n        pages += len(notes.urlList)\n    fields = [course.courseName, uploaderName, lastUpdated, frequency, pages, totalRating,\n              notesList, course.colour, noteBook.bmUserList, noteBook.ratedUserIds,\n              noteBook.ratingList, noteBook.uploaderId]\n    memcache.add(noteBookId.urlsafe(), fields, 86400)\n    if memcache.get('views' + noteBookId.urlsafe()) is None:\n        if isAuthor == 1:\n            memcache.add('views' + noteBookId.urlsafe(), views + 1, 86400)\n        else:\n            memcache.add('views' + noteBookId.urlsafe(), views, 86400)\n    else:\n        memcache.incr('views' + noteBookId.urlsafe())\n    views = memcache.get('views' + noteBookId.urlsafe())\n    return NoteBookDetailResponse(courseName=course.courseName,\n                                  isAuthor=isAuthor, uploaderName=uploaderName,\n                                  lastUpdated=lastUpdated, views=views,\n                                  rated=rated, frequency=frequency,\n                                  pages=pages, totalRating=totalRating,\n                                  notes=notesList, bookmarkStatus=bookmarkStatus,\n                                  response=0, colour=course.colour,\n                                  numUsersRated=str(len(noteBook.ratingList)),\n                                  description=\"OK\")\n\n\ndef getNoteBookListMethod(request):\n    \"\"\"getNoteBookListMethod(request)\n       request (noteBookIds[]) OR request(bpid) OR request(upid) OR request(courseId)\n       OR request(profileId)\"\"\"\n    noteBookIds = getattr(request, 'noteBookIds', None)\n    bpid = getattr(request, 'bpid', None)\n    upid = getattr(request, 'upid', None)\n    courseId = getattr(request, 'courseId', None)\n    profileId = getattr(request, 'profileId', None)\n    noteBookList = []\n    if noteBookIds:\n        for idurlsafe in noteBookIds:\n            try:\n                noteBookId = ndb.Key(urlsafe=idurlsafe)\n                noteBook = noteBookId.get()\n                if noteBook is None:\n                    raise Exception(\"Invalid noteBookId\")\n            except Exception, E:\n                print str(E)\n                return NoteBookListResponse(response=1, description=str(E))\n            course = noteBook.courseId.get()\n            if course is None:\n                print \"Invalid courseId\"\n                return NoteBookListResponse(response=1, description=\"Invalid courseId\")\n            uploader = noteBook.uploaderId.get()\n            if uploader is None:\n                print \"Invalid profileId\"\n                return NoteBookListResponse(response=1, description=\"Invalid profileId\")\n            pages = 0\n            for notesId in noteBook.notesIds:\n                notes = notesId.get()\n                if notes is None:\n                    continue\n                pages += len(notes.urlList)\n            #cacheVal = memcache.get(noteBookId.urlsafe())\n            #if cacheVal is not None:\n            memViews = memcache.get('views' + noteBookId.urlsafe())\n            print \"memViews in cache : \" + memViews\n            if memViews is None:\n                memViews = noteBook.views\n                memcache.add('views' + noteBookId.urlsafe(), memViews, 86400)\n\n            new = NoteBookResponse(noteBookId=idurlsafe,\n                                   courseName=course.courseName,\n                                   uploaderName=uploader.profileName,\n                                   views=memViews, pages=pages,\n                                   totalRating=noteBook.totalRating,\n                                   frequency=noteBook.frequency,\n                                   lastUpdated=noteBook.lastUpdated,\n                                   colour=course.colour)\n            noteBookList.append(new)\n    elif bpid:\n        try:\n            profileId = ndb.Key(urlsafe=bpid)\n            profile = profileId.get()\n            if profile is None:\n                raise Exception(\"Invalid profileId\")\n        except Exception, E:\n            print str(E)\n            return NoteBookListResponse(response=1, description=str(E))\n        bookmarkedIds = profile.bookmarkedNoteBookIds\n        for noteBookId in bookmarkedIds:\n            noteBook = noteBookId.get()\n            if noteBook is None:\n                print \"Invalid noteBookId\"\n                continue\n            course = noteBook.courseId.get()\n            if course is None:\n                print \"Invalid courseId\"\n                continue\n            uploader = noteBook.uploaderId.get()\n            if uploader is None:\n                print \"Invalid uploaderId\"\n                continue\n            pages = 0\n            for notesId in noteBook.notesIds:\n                notes = notesId.get()\n                if notes is None:\n                    print \"Invalid notesId\"\n                    continue\n                pages += len(notes.urlList)\n            new = NoteBookResponse(noteBookId=noteBookId.urlsafe(),\n                                   courseName=course.courseName,\n                                   uploaderName=uploader.profileName,\n                                   views=noteBook.views, pages=pages,\n                                   totalRating=noteBook.totalRating,\n                                   frequency=noteBook.frequency,\n                                   lastUpdated=noteBook.lastUpdated,\n                                   colour=course.colour,\n                                   courseId=course.key.urlsafe())\n            noteBookList.append(new)\n    elif upid:\n        try:\n            profileId = ndb.Key(urlsafe=upid)\n            profile = profileId.get()\n            if profile is None:\n                raise Exception(\"Invalid profileId\")\n        except Exception:\n            print str(E)\n            return NoteBookListResponse(response=1, description=str(E))\n        uploadedIds = profile.uploadedNoteBookIds\n        for noteBookId in uploadedIds:\n            noteBook = noteBookId.get()\n            if noteBook is None:\n                print \"Invalid noteBookId\"\n                continue\n            course = noteBook.courseId.get()\n            if course is None:\n                print \"Invalid courseId\"\n                continue\n            uploader = noteBook.uploaderId.get()\n            if uploader is None:\n                return NoteBookListResponse(response=1, description=\"Invalid profileId\")\n            pages = 0\n            for notesId in noteBook.notesIds:\n                notes = notesId.get()\n                if notes is None:\n                    return NoteBookListResponse(response=1, description=\"Invalid notesId\")\n                pages += len(notes.urlList)\n            new = NoteBookResponse(noteBookId=noteBookId.urlsafe(),\n                                   courseName=course.courseName,\n                                   uploaderName=uploader.profileName,\n                                   views=noteBook.views, pages=pages,\n                                   totalRating=noteBook.totalRating,\n                                   frequency=noteBook.frequency,\n                                   lastUpdated=noteBook.lastUpdated,\n                                   colour=course.colour,\n                                   courseId=course.key.urlsafe())\n            noteBookList.append(new)\n    elif courseId:\n        try:\n            courseId = ndb.Key(urlsafe=courseId)\n            course = courseId.get()\n            if course is None:\n                raise Exception(\"Invalid courseId\")\n        except Exception, E:\n            print str(E)\n            return NoteBookListResponse(response=1, description=str(E))\n        noteBookIds = course.noteBookIds\n        for noteBookId in noteBookIds:\n            noteBook = noteBookId.get()\n            if noteBook is None:\n                continue\n            uploader = noteBook.uploaderId.get()\n            pages = 0\n            for notesId in noteBook.notesIds:\n                notes = notesId.get()\n                if notes is None:\n                    continue\n                pages += len(notes.urlList)\n            new = NoteBookResponse(noteBookId=noteBookId.urlsafe(),\n                                   courseName=course.courseName,\n                                   uploaderName=uploader.profileName,\n                                   views=noteBook.views, pages=pages,\n                                   totalRating=noteBook.totalRating,\n                                   frequency=noteBook.frequency,\n                                   lastUpdated=noteBook.lastUpdated,\n                                   colour=course.colour,\n                                   courseId=course.key.urlsafe())\n            noteBookList.append(new)\n            noteBookList.sort(key=lambda x: x.lastUpdated, reverse=True)\n    elif profileId:\n        try:\n            profileId = ndb.Key(urlsafe=profileId)\n            profile = profileId.get()\n            if profile is None:\n                raise Exception(\"Invalid profileId\")\n        except Exception, E:\n            print str(E)\n            return NoteBookListResponse(response=1, description=str(E))\n        for courseId in profile.subscribedCourseIds:\n            course = courseId.get()\n            if course is None:\n                print \"Invalid courseId\"\n                continue\n            noteBookIds = course.noteBookIds\n            for noteBookId in noteBookIds:\n                noteBook = noteBookId.get()\n                if noteBook is None:\n                    print \"Invalid noteBookId\"\n                    continue\n                uploader = noteBook.uploaderId.get()\n                if uploader is None:\n                    print \"Invalid profileId\"\n                    continue\n                pages = 0\n                for notesId in noteBook.notesIds:\n                    notes = notesId.get()\n                    if notes is None:\n                        print \"Invalid notesId\"\n                        continue\n                    pages += len(notes.urlList)\n                new = NoteBookResponse(noteBookId=noteBookId.urlsafe(),\n                                       courseName=course.courseName,\n                                       uploaderName=uploader.profileName,\n                                       views=noteBook.views, pages=pages,\n                                       totalRating=noteBook.totalRating,\n                                       frequency=noteBook.frequency,\n                                       lastUpdated=noteBook.lastUpdated,\n                                       colour=course.colour,\n                                       courseId=course.key.urlsafe())\n                noteBookList.append(new)\n    else:\n        print \"Bad request\"\n        return NoteBookListResponse(response=1, description=\"Bad request\")\n    return NoteBookListResponse(response=0, description=\"OK\",\n                                noteBookList=noteBookList)\n\n\ndef rateThisMethod(request):\n    \"\"\"rateThisMethod(request)\n       request (profileId, rating, noteBookId)\n       To rate a noteBook\"\"\"\n    try:\n        profileId = ndb.Key(urlsafe=getattr(request, 'profileId'))\n    except Exception:\n        print \"Invalid profileId\"\n        return Response(response=1, description=\"Invalid profileId\")\n    try:\n        noteBookId = ndb.Key(urlsafe=getattr(request, 'noteBookId'))\n        noteBook = noteBookId.get()\n        if noteBook is None:\n            raise Exception(\"Invalid noteBookId\")\n    except Exception, E:\n        print str(E)\n        return Response(response=1, description=str(E))\n    rating = getattr(request, 'rating')\n    if profileId in noteBook.ratedUserIds:\n        idx = noteBook.ratedUserIds.index(profileId)\n        del(noteBook.ratingList[idx])\n        noteBook.ratedUserIds.remove(profileId)\n    noteBook.ratedUserIds.append(profileId)\n    noteBook.ratingList.append(rating)\n\n    # setting the totalRating to avg\n    noteBook.totalRating = str(sum(noteBook.ratingList) / len(noteBook.ratingList))\n\n    # updating the memccache\n    cacheVal = memcache.get(noteBookId.urlsafe())\n    if cacheVal is not None:\n        cacheVal[9] = noteBook.ratedUserIds\n        cacheVal[10] = noteBook.ratingList\n        cacheVal[5] = noteBook.totalRating\n        memcache.set(noteBookId.urlsafe(), cacheVal)\n    noteBook.put()\n\n    # creating notification\n    notifText = 'Someone rated your notebook!!! Suspense!'\n    createNotification([noteBook.uploaderId], 'Campus Connect', notifText,\n                       'rated', noteBookId.urlsafe(), noteBook.courseId.urlsafe())\n\n    return Response(response=0, description=\"OK\")\n\n\ndef coursePageMethod(request):\n    \"\"\"coursePage(request)\n       request(profileId, courseId)\"\"\"\n    try:\n        courseId = ndb.Key(urlsafe=getattr(request, 'courseId'))\n    except Exception:\n        print \"Invalid courseId\"\n        return CoursePageResponse(response=1, description=\"Invalid courseId\")\n    try:\n        profileId = ndb.Key(urlsafe=getattr(request, 'profileId'))\n    except Exception:\n        print \"Invalid profileId\"\n        return CoursePageResponse(response=1, description=\"Invalid profileId\")\n    cacheVal = memcache.get(courseId.urlsafe())\n    if cacheVal is not None:\n        if profileId in cacheVal[13]:\n            isSubscribed = 1\n        else:\n            isSubscribed = 0\n        if profileId in cacheVal[19]:\n            isAdmin = 1\n        else:\n            isAdmin = 0\n        return CoursePageResponse(response=0, description=\"OK\", isSubscribed=isSubscribed,\n                                  courseName=cacheVal[0], date=cacheVal[1],\n                                  startTime=cacheVal[2], endTime=cacheVal[3],\n                                  examCount=cacheVal[4], assignmentCount=cacheVal[5],\n                                  notesCount=cacheVal[6], examList=cacheVal[7],\n                                  assignmentList=cacheVal[8], studentCount=cacheVal[9],\n                                  professorName=cacheVal[10], colour=cacheVal[11],\n                                  elective=cacheVal[12], collegeName=cacheVal[14],\n                                  branchNames=cacheVal[15], sectionNames=cacheVal[16],\n                                  batchNames=cacheVal[17], semester=cacheVal[18],\n                                  isAdmin=isAdmin, courseCode=cacheVal[20])\n    course = courseId.get()\n    if course is None:\n        print \"Invalid courseId\"\n        return CoursePageResponse(response=1, description=\"Invalid courseId\")\n    if profileId in course.studentIds:\n        isSubscribed = 1\n    else:\n        isSubscribed = 0\n    college = course.collegeId.get()\n    collegeName = college.collegeName\n    assignmentList, examList = [], []\n    curDate = datetime.datetime.now().date()\n    curTime = (datetime.datetime.now() + datetime.timedelta(hours=5, minutes=30)).time()\n    dueAssignments, dueExams, recentNotes = 0, 0, 0\n    assignmentIds = course.assignmentIds\n    studentCount = len(course.studentIds)\n    for assignmentId in assignmentIds:\n        assignment = assignmentId.get()\n        if assignment is None:\n            print \"Invalid assignmentId\"\n            continue\n        a = assignment.dueDate\n        date, month, year = int(a[0:2]), int(a[3:5]), int(a[6:10])\n        dueDate = datetime.date(year, month, date)\n        if(curDate > dueDate):\n            continue\n        a = assignment.dueTime\n        hour, minute = int(a[0:2]), int(a[3:5])\n        dueTime = datetime.time(hour, minute)\n        if(curDate == dueDate and dueTime < curTime):\n            continue\n        dueAssignments = dueAssignments + 1\n        uploader = assignment.uploaderId.get()\n        if uploader is None:\n            print \"Invalid uploaderId\"\n            continue\n        assignmentList.append(AssExamResponse(Id=assignmentId.urlsafe(),\n                                              name=assignment.assignmentTitle,\n                                              dueDate=assignment.dueDate,\n                                              dueTime=assignment.dueTime,\n                                              uploaderName=uploader.profileName,\n                                              dateUploaded=assignment.dateUploaded,\n                                              views=assignment.assignmentViews,\n                                              description=assignment.assignmentDesc))\n    examIds = course.examIds\n    for examId in examIds:\n        exam = examId.get()\n        if exam is None:\n            return CoursePageResponse(response=1, description=\"Invalid examId\")\n        a = exam.dueDate\n        date, month, year = int(a[0:2]), int(a[3:5]), int(a[6:10])\n        dueDate = datetime.date(year, month, date)\n        if(curDate > dueDate):\n            continue\n        a = exam.dueTime\n        hour, minute = int(a[0:2]), int(a[3:5])\n        dueTime = datetime.time(hour, minute)\n        if(curDate == dueDate and dueTime < curTime):\n            continue\n        dueExams = dueExams + 1\n        uploader = exam.uploaderId.get()\n        if uploader is None:\n            return CoursePageResponse(response=1, description=\"Invalid profileId\")\n        examList.append(AssExamResponse(Id=examId.urlsafe(),\n                                        name=exam.examTitle,\n                                        dueDate=exam.dueDate,\n                                        dueTime=exam.dueTime,\n                                        uploaderName=uploader.profileName,\n                                        dateUploaded=exam.dateUploaded,\n                                        views=exam.examViews,\n                                        description=exam.examDesc))\n        noteBookIds = course.noteBookIds\n        for noteBookId in noteBookIds:\n            noteBook = noteBookId.get()\n            if noteBook is None:\n                print \"Invalid noteBookId\"\n                continue\n            a = str(noteBook.lastUpdated)\n            date, month, year = int(a[8:10]), int(a[5:7]), int(a[0:4])\n            lastUpdated = datetime.date(year, month, date)\n            if(curDate - lastUpdated).days > 7:\n                continue\n            recentNotes = recentNotes + 1\n    info = [collegeName, dueExams, dueAssignments, recentNotes, examList, assignmentList, studentCount]\n    fields = [course.courseName, course.date, course.startTime, course.endTime,\n              info[1], info[2], info[3], info[4],\n              info[5], info[6], course.professorName, course.colour,\n              course.elective, course.studentIds, info[0], course.branchNames,\n              course.sectionNames, course.batchNames, course.semester,\n              course.adminIds, course.courseCode]\n    memcache.add(course.key.urlsafe(), fields, 86400)\n    if profileId in course.adminIds:\n        isAdmin = 1\n    else:\n        isAdmin = 0\n    return CoursePageResponse(response=0, description=\"OK\", isSubscribed=isSubscribed,\n                              courseName=course.courseName, date=course.date,\n                              startTime=course.startTime, endTime=course.endTime,\n                              examCount=dueExams, assignmentCount=dueAssignments,\n                              notesCount=recentNotes, examList=examList,\n                              assignmentList=assignmentList, studentCount=studentCount,\n                              professorName=course.professorName, colour=course.colour,\n                              elective=course.elective, collegeName=collegeName,\n                              branchNames=course.branchNames,\n                              sectionNames=course.sectionNames,\n                              batchNames=course.batchNames,\n                              semester=course.semester, isAdmin=isAdmin,\n                              courseCode=course.courseCode)\n\n\ndef getAssignmentListMethod(request):\n    \"\"\"getAssignmentListmethod(rquest)\n       request (profileId) OR request (courseId)\"\"\"\n    profileId = getattr(request, 'profileId', None)\n    courseId = getattr(request, 'courseId', None)\n    if profileId:\n        try:\n            profileId = ndb.Key(urlsafe=profileId)\n        except Exception:\n            return GetAssListResponse(response=1, description=\"Invalid profileId\")\n        profile = profileId.get()\n        if profile is None:\n            print \"Invalid profileId\"\n            return GetAssListResponse(response=1, description=\"Invalid profileId\")\n        assList = []\n        for courseId in profile.subscribedCourseIds:\n            course = courseId.get()\n            if course is None:\n                continue\n            for assignmentId in course.assignmentIds:\n                assignment = assignmentId.get()\n                if assignment is None:\n                    continue\n                if profileId == assignment.uploaderId:\n                    isAuthor = 1\n                else:\n                    isAuthor = 0\n                uploaderName = assignment.uploaderId.get().profileName\n                assList.append(AssignmentResponse(assignmentId=assignmentId.urlsafe(), isAuthor=isAuthor,\n                                                  views=assignment.assignmentViews,\n                                                  assignmentTitle=assignment.assignmentTitle,\n                                                  assignmentDesc=assignment.assignmentDesc,\n                                                  lastUpdated=assignment.dateUploaded,\n                                                  uploaderName=uploaderName, dueDate=assignment.dueDate,\n                                                  dueTime=assignment.dueTime, pages=len(assignment.urlList),\n                                                  courseName=course.courseName, colour=course.colour))\n    else:\n        try:\n            courseId = ndb.Key(urlsafe=courseId)\n        except Exception:\n            return GetAssListResponse(response=1, description=\"Invalid courseId\")\n        assList = []\n        course = courseId.get()\n        if course is None:\n            return GetAssListResponse(response=1, description=\"Invalid courseId\")\n        for assignmentId in course.assignmentIds:\n            assignment = assignmentId.get()\n            if assignment is None:\n                continue\n            if profileId == assignment.uploaderId:\n                isAuthor = 1\n            else:\n                isAuthor = 0\n            uploaderName = assignment.uploaderId.get().profileName\n            assList.append(AssignmentResponse(assignmentId=assignmentId.urlsafe(),\n                                              isAuthor=isAuthor,\n                                              views=assignment.assignmentViews,\n                                              assignmentTitle=assignment.assignmentTitle,\n                                              assignmentDesc=assignment.assignmentDesc,\n                                              lastUpdated=assignment.dateUploaded,\n                                              uploaderName=uploaderName,\n                                              dueDate=assignment.dueDate,\n                                              dueTime=assignment.dueTime,\n                                              pages=len(assignment.urlList),\n                                              courseName=course.courseName,\n                                              colour=course.colour))\n    assList.sort(key=lambda x: x.lastUpdated, reverse=True)\n    return GetAssListResponse(response=0, description=\"OK\",\n                              assList=assList)\n\n\ndef getExamListMethod(request):\n    profileId = getattr(request, 'profileId', None)\n    courseId = getattr(request, 'courseId', None)\n    if profileId:\n        try:\n            profileId = ndb.Key(urlsafe=profileId)\n        except Exception:\n            print \"Invalid profileId\"\n            return GetExamListResponse(response=1, description=\"Invalid profileId\")\n        profile = profileId.get()\n        if profile is None:\n            print \"Invalid profileId\"\n            return GetExamListResponse(response=1, description=\"Invalid profileId\")\n        examList = []\n        for courseId in profile.subscribedCourseIds:\n            course = courseId.get()\n            if course is None:\n                print \"Invalid courseId\"\n                continue\n            for examId in course.examIds:\n                exam = examId.get()\n                if exam is None:\n                    print \"Invalid examId\"\n                    continue\n                if profileId == exam.uploaderId:\n                    isAuthor = 1\n                else:\n                    isAuthor = 0\n                uploaderName = exam.uploaderId.get().profileName\n                examList.append(ExamResponse(examId=examId.urlsafe(),\n                                             isAuthor=isAuthor, views=exam.examViews,\n                                             examTitle=exam.examTitle,\n                                             examDesc=exam.examDesc,\n                                             lastUpdated=exam.dateUploaded,\n                                             uploaderName=uploaderName,\n                                             dueDate=exam.dueDate,\n                                             dueTime=exam.dueTime,\n                                             pages=len(exam.urlList),\n                                             courseName=course.courseName,\n                                             colour=course.colour))\n    else:\n        try:\n            courseId = ndb.Key(urlsafe=courseId)\n        except Exception:\n            print \"Invalid courseId\"\n            return GetExamListResponse(response=1, description=\"Invalid courseId\")\n        course = courseId.get()\n        examList = []\n        for examId in course.examIds:\n            exam = examId.get()\n            if exam is None:\n                print \"Invalid examId\"\n                continue\n            if profileId == exam.uploaderId:\n                isAuthor = 1\n            else:\n                isAuthor = 0\n            uploaderName = exam.uploaderId.get().profileName\n            examList.append(ExamResponse(examId=examId.urlsafe(),\n                                         isAuthor=isAuthor, views=exam.examViews,\n                                         examTitle=exam.examTitle,\n                                         examDesc=exam.examDesc,\n                                         lastUpdated=exam.dateUploaded,\n                                         uploaderName=uploaderName,\n                                         dueDate=exam.dueDate,\n                                         dueTime=exam.dueTime,\n                                         pages=len(exam.urlList),\n                                         courseName=course.courseName,\n                                         colour=course.colour))\n    examList.sort(key=lambda x: x.lastUpdated, reverse=True)\n    return GetExamListResponse(response=0, description=\"OK\",\n                               examList=examList)\n\n\ndef bookmarkMethod(request):\n    try:\n        profileId = ndb.Key(urlsafe=getattr(request, 'profileId'))\n    except Exception:\n        print \"Invalid profileId\"\n        return BookmarkResponse(response=1, description=\"Invalid profileId\")\n    try:\n        noteBookId = ndb.Key(urlsafe=getattr(request, 'noteBookId'))\n    except Exception:\n        print \"Invalid noteBookId\"\n        return BookmarkResponse(response=1, description=\"Invalid noteBookId\")\n    profile = profileId.get()\n    noteBook = noteBookId.get()\n    if noteBookId in profile.bookmarkedNoteBookIds:\n        profile.bookmarkedNoteBookIds.remove(noteBookId)\n        bmUserList = set(noteBook.bmUserList)\n        bmUserList.discard(profileId)\n        noteBook.bmUserList = list(bmUserList)\n        status = 0\n    else:\n        profile.bookmarkedNoteBookIds.append(noteBookId)\n        bmUserList = set(noteBook.bmUserList)\n        bmUserList.add(profileId)\n        noteBook.bmUserList = bmUserList\n        status = 1\n        # creating notification\n        notifText = 'Congrats!!! Peoples are loving you notebook'\n        createNotification([noteBook.uploaderId], 'Campus Connect', notifText,\n                           'notes', noteBookId.urlsafe(), noteBook.courseId.urlsafe())\n    cacheVal = memcache.get(noteBookId.urlsafe())\n    if cacheVal is not None:\n        cacheVal[8] = noteBook.bmUserList\n    if memcache.get(noteBookId.urlsafe()) is None:\n        memcache.add(noteBookId.urlsafe(), cacheVal, 86400)\n    else:\n        memcache.set(noteBookId.urlsafe(), cacheVal)\n    profile.put()\n    noteBook.put()\n\n    return BookmarkResponse(response=0, description=\"OK\", bookmarkStatus=status)\n\n\ndef clearAll():\n    q = College.query()\n    for entity in q:\n        entity.key.delete()\n    q = Profile.query()\n    for entity in q:\n        entity.key.delete()\n    q = Course.query()\n    for entity in q:\n        search.Index('Course').delete([entity.key.urlsafe()])\n        entity.key.delete()\n    q = Assignment.query()\n    for entity in q:\n        entity.key.delete()\n    q = CollegeRequestModel.query()\n    for entity in q:\n        entity.key.delete()\n    q = Exam.query()\n    for entity in q:\n        entity.key.delete()\n    q = NoteBook.query()\n    for entity in q:\n        search.Index('NoteBook').delete([entity.key.urlsafe()])\n        entity.key.delete()\n    q = Notes.query()\n    for entity in q:\n        entity.key.delete()\n    q = Notification.query()\n    for entity in q:\n        entity.key.delete()\n\n\ndef collegeListMethod(request):\n    allCollege = College.query().fetch()\n    collegeList = []\n    for col in allCollege:\n        collegeId = col.key\n        collegeDetail = CollegeDetails(collegeId=collegeId.urlsafe(),\n                                       collegeName=col.collegeName,\n                                       branchNames=col.branchNameList)\n        collegeList.append(collegeDetail)\n    return CollegeListResponse(collegeList=collegeList)\n\n\ndef addBranchMethod(request):\n    collegeId = ndb.Key(urlsafe=getattr(request, 'collegeId'))\n    branchName = getattr(request, 'branchName')\n    college = collegeId.get()\n    if branchName not in college.branchNameList:\n        college.branchNameList.append(branchName)\n    college.put()\n\n\ndef unsubscribeCourseMethod(request):\n    try:\n        profileId = ndb.Key(urlsafe=getattr(request, 'profileId'))\n    except Exception, E:\n        print \"Invalid profileId\\n\" + str(E)\n        return Response(response=1, description=\"Invaild profileId \" + str(E))\n    try:\n        courseId = ndb.Key(urlsafe=getattr(request, 'courseId'))\n    except Exception, E:\n        print \"Invalid courseId\\n\" + str(E)\n        return Response(response=1, description=\"Invaild courseId \" + str(E))\n    profile = profileId.get()\n    course = courseId.get()\n    if profile is None:\n        return Response(response=1, description=\"Invaild profileId\")\n    if course is None:\n        return Response(response=1, description=\"Invaild courseId\")\n    if courseId in profile.subscribedCourseIds:\n        profile.subscribedCourseIds.remove(courseId)\n        profile.put()\n        cacheVal = memcache.get(courseId.urlsafe())\n        if cacheVal is not None:\n            cacheVal[9] -= 1\n            cacheVal[13].remove(profileId)\n            memcache.set(courseId.urlsafe(), cacheVal)\n        studentIds = set(course.studentIds)\n        studentIds.discard(profileId)\n        course.studentIds = list(studentIds)\n        course.put()\n    else:\n        profile.subscribedCourseIds.append(courseId)\n        profile.put()\n        cacheVal = memcache.get(courseId.urlsafe())\n        if cacheVal is not None:\n            cacheVal[9] += 1\n            cacheVal[13].append(profileId)\n            memcache.set(courseId.urlsafe(), cacheVal)\n        studentIds = set(course.studentIds)\n        studentIds.add(profileId)\n        course.studentIds = list(studentIds)\n        course.put()\n\n    return Response(response=0, description=\"OK\")\n\n\ndef deleteNoteBook(id, delNotes=0):\n    try:\n        noteBookId = ndb.Key(urlsafe=id)\n    except Exception:\n        return Response(response=1, description=\"No such noteBookId\")\n    noteBook = noteBookId.get()\n    if noteBook is None:\n        return Response(response=1, description=\"No such noteBookId\")\n    if delNotes == 0:\n        for notesId in noteBook.notesIds:\n            notesId.delete()\n    course = noteBook.courseId.get()\n    course.noteBookIds.remove(noteBookId)\n    uploader = noteBook.uploaderId.get()\n    uploader.uploadedNoteBookIds.remove(noteBookId)\n    bookmarkedProfiles = Profile.query(Profile.bookmarkedNoteBookIds == noteBookId).fetch()\n    college = course.collegeId.get()\n    college.noteBookCount -= 1\n    college.put()\n    course.put()\n    uploader.put()\n    for profileR in bookmarkedProfiles:\n        profile = profileR.key.get()\n        profile.bookmarkedNoteBookIds.remove(noteBookId)\n        profile.put()\n    noteBookId.delete()\n    search.Index('NoteBook').delete([id])\n    return Response(response=0, description=\"OK\")\n\n\ndef deleteNotes(id):\n    try:\n        notesId = ndb.Key(urlsafe=id)\n    except Exception:\n        return Response(response=1, description=\"No such notes\")\n    notes = notesId.get()\n    noteBookId = notes.noteBookId\n    noteBook = noteBookId.get()\n    noteBook.notesIds.remove(notesId)\n    noteBook.frequency -= 1\n    noteBook.put()\n    if noteBook.frequency == 0:\n        deleteNoteBook(noteBookId.urlsafe(), delNotes=1)\n    return Response(response=0, description=\"OK\")\n\n\ndef deleteAssignment(id):\n    try:\n        assignmentId = ndb.Key(urlsafe=id)\n    except Exception:\n        return Response(response=1, description=\"No such assignmentId\")\n    assignment = assignmentId.get()\n    course = assignment.courseId.get()\n    course.assignmentIds.remove(assignmentId)\n    course.put()\n    assignmentId.delete()\n    memcache.delete(assignmentId.urlsafe())\n    memcache.delete(course.key.urlsafe())\n    return Response(response=0, description=\"OK\")\n\n\ndef deleteExam(id):\n    try:\n        examId = ndb.Key(urlsafe=id)\n    except Exception:\n        return Response(response=1, description=\"No such examId\")\n    exam = examId.get()\n    course = exam.courseId.get()\n    course.examIds.remove(examId)\n    course.put()\n    examId.delete()\n    memcache.delete(course.key.urlsafe())\n    memcache.delete(examId.urlsafe())\n    return Response(response=0, description=\"OK\")\n\n\ndef deleteProfile(id):\n    try:\n        profileId = ndb.Key(urlsafe=id)\n    except Exception:\n        return Response(response=1, description=\"No such profileId\")\n    profile = profileId.get()\n    college = profile.collegeId.get()\n    try:\n        emailData = {\"email\": profile.email }\n    except:\n        print \"error getting email from profile\"\n    college.studentCount -= 1\n    for noteBookId in profile.uploadedNoteBookIds:\n        deleteNoteBook(noteBookId.urlsafe())\n    assUploadedList = Assignment.query(Assignment.uploaderId == profileId).fetch()\n    for assignment in assUploadedList:\n        assignmentId = assignment.key\n        deleteAssignment(assignmentId.urlsafe())\n    examUploadedList = Exam.query(Exam.uploaderId == profileId).fetch()\n    for exam in examUploadedList:\n        examId = exam.key\n        deleteExam(examId.urlsafe())\n    for courseId in profile.administeredCourseIds:\n        memcache.delete(courseId.urlsafe())\n        course = courseId.get()\n        if len(course.adminIds) <= 1:\n            if len(course.studentIds) == 1:\n                course.delete()\n        else:\n            course.adminIds.append(course.studentIds[0])\n            newAdmin = course.adminIds[0]\n            newAdmin.administeredCourseIds.append(courseId)\n            newAdmin.put()\n            if profileId in course.studentIds:\n                course.studentIds.remove(profileId)\n                course.put()\n    profileId.delete()\n    college.put()\n    try:\n        r = requests.post(\"http://campusconnect-2016.herokuapp.com/deleteuser\",data=emailData)\n        print r.text\n    except:\n        print \"error deleting user in django\"\n    return Response(response=0, description=\"OK\")\n\n\ndef deleteCourse(id):\n    try:\n        courseId = ndb.Key(urlsafe=id)\n    except Exception:\n        return Response(response=1, description=\"No such courseId\")\n    course = courseId.get()\n    if course is None:\n        return Response(response=1, description=\"No such courseId\")\n    for noteBookId in course.noteBookIds:\n        deleteNoteBook(noteBookId.urlsafe())\n    for assignmentId in course.assignmentIds:\n        deleteAssignment(assignmentId.urlsafe())\n    for examId in course.examIds:\n        deleteExam(examId.urlsafe())\n    result = Profile.query(ndb.OR(Profile.administeredCourseIds == courseId,\n                                  Profile.subscribedCourseIds == courseId,\n                                  Profile.availableCourseIds == courseId)).fetch()\n    for profile in result:\n        profile1 = profile.key.get()\n        if courseId in profile1.subscribedCourseIds:\n            profile1.subscribedCourseIds.remove(courseId)\n        if courseId in profile1.availableCourseIds:\n            profile1.availableCourseIds.remove(courseId)\n        if courseId in profile1.administeredCourseIds:\n            profile1.administeredCourseIds.remove(courseId)\n        profile1.put()\n    college = course.collegeId.get()\n    college.courseIds.remove(courseId)\n    college.put()\n    memcache.delete(courseId.urlsafe())\n    courseId.delete()\n    search.Index('Course').delete([id])\n    return Response(response=0, description='OK')\n\n\ndef deleteCollege(id):\n    try:\n        collegeId = ndb.Key(urlsafe=id)\n    except Exception:\n        return Response(response=1, description=\"No such collegeId\")\n    college = collegeId.get()\n    if college is None:\n        return Response(response=1, description=\"No such collegeId\")\n    collegeId.delete()\n    return Response(response=0, description='OK')\n\n\ndef deleteMethod(request):\n    profileId = getattr(request, 'profileId', None)\n    notesId = getattr(request, 'notesId', None)\n    noteBookId = getattr(request, 'noteBookId', None)\n    assignmentId = getattr(request, 'assignmentId', None)\n    examId = getattr(request, 'examId', None)\n    courseId = getattr(request, 'courseId', None)\n    collegeId = getattr(request, 'collegeId', None)\n    if profileId:\n        return deleteProfile(profileId)\n    if notesId:\n        return deleteNotes(notesId)\n    if noteBookId:\n        return deleteNoteBook(noteBookId)\n    if assignmentId:\n        return deleteAssignment(assignmentId)\n    if examId:\n        return deleteExam(examId)\n    if courseId:\n        return deleteCourse(courseId)\n    if collegeId:\n        return deleteCollege(collegeId)\n\n\ndef createNotification(profileIds, title, text, type, id=None, courseId=None):\n    \"\"\"createNotification(profileIds, title, text, type, id, courseId=None)\"\"\"\n    for profileId in profileIds:\n        urlsafeId = profileId.urlsafe()\n        if memcache.get('notif' + urlsafeId) is None:\n            memcache.add('notif' + urlsafeId, 0, NOTIFICATION_TIME)\n        else:\n            memcache.incr('notif' + urlsafeId)\n    timeStamp = datetime.datetime.now() + datetime.timedelta(hours=5, minutes=30)\n    newNotification = Notification(type=type, id=id, title=title, text=text,\n                                   profileIdList=profileIds, timeStamp=timeStamp,\n                                   courseId=courseId)\n    newNotification.put()\n\n\ndef getNotificationMethod(request):\n    profileId = ndb.Key(urlsafe=getattr(request, 'profileId'))\n    results = Notification.query(Notification.profileIdList == profileId).order(-Notification.timeStamp)\n    notifList = []\n    for result in results:\n        notif = NotificationResponse(title=result.title, text=result.text,\n                                     timeStamp=result.timeStamp,\n                                     type=result.type, id=result.id,\n                                     courseId=result.courseId)\n        notifList.append(notif)\n\n    # reseting cache of newNotifications to 0\n    if memcache.get('notif' + profileId.urlsafe()) is None:\n        memcache.add('notif' + profileId.urlsafe(), 0, NOTIFICATION_TIME)\n    else:\n        memcache.set('notif' + profileId.urlsafe(), 0)\n    return NotificationList(notificationList=notifList, total=str(len(notifList)))\n\n\ndef branchListMethod(request):\n    try:\n        collegeId = ndb.Key(urlsafe=getattr(request, 'collegeId'))\n    except Exception:\n        print \"Invalid collegeId\"\n        return BranchListResponse(response=1, description='Invalid collegeId')\n    college = collegeId.get()\n    if college is None:\n        print \"Invalid collegeId\"\n        return BranchListResponse(response=1, description='Invalid collegeId')\n    return BranchListResponse(response=0, description='OK', branchList=college.branchNameList)\n\n\ndef collegeRequestMethod(request):\n    collegeName = getattr(request, 'collegeName')\n    location = getattr(request, 'location')\n    name = getattr(request, 'name')\n    phone = getattr(request, 'phone')\n    email = getattr(request, 'email')\n    college = CollegeRequestModel(collegeName=collegeName,\n                                  location=location, name=name,\n                                  phone=phone,\n                                  timeStamp=datetime.datetime.now() +\n                                  datetime.timedelta(hours=5, minutes=30),\n                                  email=email)\n    college.put()\n    sp = SparkPost('d5eda063a40ae19610612ea5d0804f20d294e62d')\n    body = \"\"\"<h1>Campus Connect</h1><br>There is a request to create new College\n              <br>\"\"\" + collegeName + \"\"\", \"\"\" + location + \"\"\"\n              <br>by \"\"\" + name + \"\"\", \"\"\" + phone + \"\"\"<br>\"\"\" + email\n    response = sp.transmissions.send(recipients=['saurav24081996@gmail.com', 'aayush@campusconnect.cc'],\n                                     html=body,\n                                     from_email={'email': 'aayush@campusconnect.cc', 'name': 'Campus Connect'},\n                                     subject='New College',\n                                     )\n    print(response)\n\n\ndef reportMethod(request):\n    id = ndb.Key(urlsafe=getattr(request, 'key'))\n    profileId = ndb.Key(urlsafe=getattr(request, 'profileId'))\n    profile = profileId.get()\n    college = profile.collegeId.get()\n    desc = getattr(request, 'description')\n    newReport = Report(id=id, profileId=profileId,\n                       description=desc)\n    newReport.put()\n    body = \"<h1>CAMPUS CONNECT</h1><br>\"\n    body += \"Something is Reported<br>\"\n    body += \"College: \" + college.collegeName\n    body += \"<br>Details<br>id: \" + id.urlsafe()\n    body += \"<br>By: \" + profile.profileName\n    body += \"<br>profileId: \" + profileId.urlsafe()\n    sendEmail(subject='Something is Reported', body=body)\n    return Response(response=0, description='OK')\n\n\ndef profileExists(request):\n    email = getattr(request,'email')\n    profile = Profile.query(Profile.email==email)\n    if profile is not None:\n        return Response(response=1,description='profile ex')\n    else:\n        return Response(response=0,)\n\n\ndef rectify():\n    courseList = Course.query().fetch()\n    for course in courseList:\n        for profileId in course.studentIds:\n            if profileId.get() is None:\n                course.studentIds.remove(profileId)\n        for profileId in course.adminIds:\n            if profileId.get() is None:\n                course.adminIds.remove(profileId)\n        course.put()\n",
			"file": "apiMethods.py",
			"file_size": 92460,
			"file_write_time": 131141269394397683,
			"settings":
			{
				"buffer_size": 90607,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 104.0,
		"last_filter": "install",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"remov",
				"Package Control: Remove Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"pi",
				"Package Control: Install Package"
			],
			[
				"list",
				"Package Control: List Packages"
			],
			[
				"format",
				"TypeScript: Format Block"
			],
			[
				"insta",
				"Package Control: Install Package"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/Ranjith V/Desktop/CC/NotesCC"
	],
	"file_history":
	[
		"/C/Users/Ranjith V/Desktop/CC/NotesCC/realTest.py",
		"/home/flappy/NotesCC/api.py",
		"/home/flappy/NotesCC/requirements.txt",
		"/home/flappy/NotesCC/emailer.py",
		"/home/flappy/NotesCC/editMethods.py",
		"/home/flappy/NotesCC/sendEmail.py",
		"/home/flappy/NotesCC/searchAPI.py",
		"/home/flappy/NotesCC/FCM.py",
		"/home/flappy/NotesCC/models.py",
		"/home/flappy/NotesCC/apiMethods.py",
		"/home/flappy/NotesCC/imageUpload.py",
		"/C/Users/Ranjith V/Desktop/CC/NotesCC/app.yaml",
		"/C/Users/Ranjith V/Desktop/CC/NotesCC/cronTasks/updateNoteBook.py",
		"/C/Users/Ranjith V/AppData/Roaming/Sublime Text 3/Packages/User/Anaconda.sublime-settings",
		"/C/Users/Ranjith V/Desktop/CC/NotesCC/slack.py",
		"/C/Users/Ranjith V/Desktop/CC/NotesCC/cronTasks/sendEmail.py",
		"/C/Users/Ranjith V/Desktop/CC/NotesCC/.gitignore",
		"/E/python/endpoints/backend/main_test.py",
		"/E/python/endpoints/backend/main.py",
		"/E/python/endpoints/backend/app.yaml",
		"/C/Users/Ranjith V/Desktop/CC/NotesCC/emailer.py",
		"/C/Users/Ranjith V/Desktop/CC/NotesCC/cronTasks/updateAssignment.py",
		"/C/Users/Ranjith V/Desktop/CC/NotesCC/apiMethods.py",
		"/C/Users/Ranjith V/Desktop/CC/NotesCC/imageUpload.py",
		"/C/Users/Ranjith V/Desktop/campusconnect/app/models.py",
		"/C/Users/Ranjith V/Desktop/campusconnect/app/static/js/url.js",
		"/C/Users/Ranjith V/Desktop/CC/NotesCC/realtest.py",
		"/C/Users/Ranjith V/Desktop/campusconnect/app/templates/firebaseAuth.html",
		"/C/Users/Ranjith V/Desktop/campusconnect/app/templates/upload.html",
		"/C/Users/Ranjith V/Desktop/campusconnect/app/templates/home - Copy.html",
		"/C/Users/Ranjith V/Desktop/test/test.html",
		"/C/Users/Ranjith V/Desktop/test.html",
		"/C/Users/Ranjith V/Desktop/CC/campusconnect/campusconnect/urls.py",
		"/C/Users/Ranjith V/Desktop/CC/campusconnect/app/templates/home.html",
		"/C/Users/Ranjith V/Desktop/CC/campusconnect/app/views.py",
		"/C/Users/Ranjith V/Desktop/CC/campusconnect/app/templates/upload.html",
		"/C/Users/Ranjith V/Desktop/CC/campusconnect/app/templates/uploads.html",
		"/C/Users/Ranjith V/Desktop/CC/campusconnect/app/edit_profile_api.py",
		"/C/Users/Ranjith V/Desktop/CC/campusconnect/app/delete_api.py",
		"/C/Users/Ranjith V/Desktop/CC/campusconnect/app/static/js/fileinput.js",
		"/C/Users/Ranjith V/Desktop/python/test.py",
		"/C/Users/Ranjith V/Desktop/CC/campusconnect/app/templates/courseSelection.html",
		"/C/Users/Ranjith V/Desktop/CC/campusconnect/app/templates/login.html",
		"/C/Users/Ranjith V/Desktop/CC/campusconnect/app/templates/Profile.html",
		"/C/Users/Ranjith V/Desktop/CC/campusconnect/app/templates/firebaseAuth.html",
		"/C/Users/Ranjith V/Desktop/CC/campusconnect/app/sign_up_api.py",
		"/C/Users/Ranjith V/Desktop/CC/campusconnect/app/templates/signin.html",
		"/C/Users/Ranjith V/Desktop/CC/campusconnect/db.sqlite3",
		"/C/Users/Ranjith V/Desktop/CC/campusconnect/app/models.py",
		"/C/Users/Ranjith V/Desktop/CC/NotesCC/campusconnectweb/app/templates/signin.html",
		"/C/Users/Ranjith V/Desktop/CC/fcm/index.html",
		"/E/python/youtube scraper/main.py",
		"/C/Users/Ranjith V/Desktop/CC/NotesCC/api.py",
		"/C/Users/Ranjith V/Desktop/CC/NotesCC/appengine_config.py",
		"/C/Users/Ranjith V/Desktop/CC/NotesCC/models.py",
		"/C/Users/Ranjith V/Desktop/CC/NotesCC/requirements.txt",
		"/C/Users/Ranjith V/Desktop/CC/NotesCC/lib/endpoints/bin/__init__.py",
		"/C/Users/Ranjith V/Desktop/CC/NotesCC/lib/endpoints/client/__init__.py",
		"/C/Users/Ranjith V/Desktop/CC/NotesCC/config.py",
		"/E/python/hello_world/main.py",
		"/E/python/hello_world/app.yaml",
		"/E/python/hello_world/youtube.py",
		"/C/Users/Ranjith V/Desktop/CC/NotesCC/FCM.py",
		"/C/Users/Ranjith V/Desktop/CC/NotesCC/editMethods.py",
		"/C/Program Files (x86)/Google/Cloud SDK/google-cloud-sdk/platform/google_appengine/google/appengine/dist27/socket.py",
		"/C/Program Files (x86)/Google/google_appengine/google/appengine/dist27/socket.py",
		"/C/Program Files (x86)/Google/Cloud SDK/google-cloud-sdk/bin/dev_appserver.py",
		"/C/Users/Ranjith V/Desktop/CC/appengine-endpoints-helloendpoints-python/app.yaml",
		"/C/Users/Ranjith V/Desktop/python/python-docs-samples/appengine/standard/endpoints/backend/app.yaml",
		"/C/Users/Ranjith V/Desktop/python/python-docs-samples/appengine/standard/endpoints/multiapi/app.yaml",
		"/C/Users/Ranjith V/Desktop/python/python-docs-samples/appengine/standard/endpoints/multiapi/main.py",
		"/C/Users/Ranjith V/Desktop/python/mysite/polls/urls.py",
		"/C/Users/Ranjith V/Desktop/python/mysite/polls/views.py",
		"/C/Users/Ranjith V/Desktop/python/mysite/mysite/urls.py",
		"/C/Users/Ranjith V/Desktop/python/mysite/mysite/__init__.py",
		"/C/Users/Ranjith V/Desktop/python/mysite/manage.py",
		"/C/Users/Ranjith V/Desktop/python/mysite/mysite/settings.py",
		"/C/Users/Ranjith V/Desktop/python/mysite/mysite/wsgi.py",
		"/C/Users/Ranjith V/Desktop/python/mysite/db.sqlite3",
		"/C/Users/Ranjith V/Desktop/movie-store/app/home.component.ts",
		"/C/Users/Ranjith V/Desktop/movie-store/app/buymovie.component.ts",
		"/C/Users/Ranjith V/Desktop/movie-store/templates/sessions.html",
		"/C/Users/Ranjith V/Desktop/movie-store/app/movie.service.ts",
		"/C/Users/Ranjith V/Desktop/movie-store/app/movie.ts",
		"/C/Users/Ranjith V/Desktop/pdf test/index (2).html",
		"/C/Users/Ranjith V/Desktop/movie-store/index.html",
		"/C/Users/Ranjith V/Desktop/movie-store/app/sessions.component.ts",
		"/C/Users/Ranjith V/Desktop/movie-store/app/app.component.ts",
		"/C/Users/Ranjith V/Desktop/movie-store/app/movie.component.ts",
		"/C/Users/Ranjith V/Desktop/angularattack2016-codingislove/src/app/index.ts",
		"/C/Users/Ranjith V/Desktop/angularattack2016-codingislove/src/app/sessions.component.ts",
		"/C/Users/Ranjith V/Desktop/angularattack2016-codingislove/src/app/environment.ts",
		"/C/Users/Ranjith V/Desktop/angular2/index.html",
		"/C/Users/Ranjith V/Desktop/angular2/package.json",
		"/C/Users/Ranjith V/Desktop/sessions/main.js",
		"/C/Users/Ranjith V/Desktop/sessions/templates/home.html",
		"/C/Users/Ranjith V/Desktop/sessions/index.html",
		"/C/Users/Ranjith V/Desktop/pdf test/photon-0.1.2-dist/photon-0.1.2-dist/template-app/index.html",
		"/E/electron-quick-start/renderer.js",
		"/C/Users/Ranjith V/Desktop/pdf test/photon-0.1.2-dist/photon-0.1.2-dist/template-app/app.js",
		"/E/electron-quick-start/records.html",
		"/E/electron-quick-start/main.js",
		"/E/electron-quick-start/css/styles.css",
		"/C/Users/Ranjith V/Documents/iMacros/Macros/fba/setup.iim",
		"/E/electron-quick-start/js/renderer.js",
		"/E/electron-quick-start/index.html",
		"/E/electron-quick-start/package.json",
		"/E/electron-quick-start/photon.html",
		"/E/electron-quick-start/css/photon.min.css",
		"/E/electron-quick-start/js/menu.js",
		"/C/Users/Ranjith V/Desktop/pdf test/photon-0.1.2-dist/photon-0.1.2-dist/template-app/package.json",
		"/C/Users/Ranjith V/AppData/Local/Temp/Temp1_photon-0.1.2-dist.zip/photon-0.1.2-dist/template-app/js/menu.js",
		"/C/Users/Ranjith V/AppData/Local/Temp/Temp1_photon-0.1.2-dist.zip/photon-0.1.2-dist/template-app/package.json",
		"/C/Users/Ranjith V/AppData/Local/Temp/Temp1_photon-0.1.2-dist.zip/photon-0.1.2-dist/template-app/app.js",
		"/C/Users/Ranjith V/Desktop/license/lolapp/lolcards/js/data.js",
		"/C/Users/Ranjith V/Desktop/license/lolapp/lolcards/core.php",
		"/C/Users/Ranjith V/Desktop/license/lolapp/lolcards/js/ui.js",
		"/C/Users/Ranjith V/Desktop/license/lolapp/lolcards/js/main.js",
		"/C/Users/Ranjith V/Desktop/license/lolapp/lolcards/main.html",
		"/C/Users/Ranjith V/Desktop/license/lolapp/lolcards/app.html",
		"/C/Users/Ranjith V/Desktop/movie-store/package.json",
		"/C/Users/Ranjith V/Desktop/movie-store/app/firebase.component.ts",
		"/C/Users/Ranjith V/Desktop/movie-store/templates/rentmovie.html",
		"/C/Users/Ranjith V/Desktop/movie-store/templates/buymovie.html",
		"/C/Users/Ranjith V/Desktop/movie-store/app/rentmovie.component.ts",
		"/C/Users/Ranjith V/Desktop/movie-store/styles/animate.css",
		"/C/Users/Ranjith V/Desktop/movie-store/app/main.ts",
		"/C/Users/Ranjith V/Desktop/movie-store/app/home.component.js"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"profile",
			"parse",
			"feed",
			"class",
			"createnotebook",
			"subscribedCourseIds",
			"subscribedCourse",
			"rating",
			"profile",
			"createassignment",
			"editprofileMethod",
			"editprofile",
			"getnotebooklistmethod",
			"notebooklist",
			"getnotebooklist",
			"notebooklist",
			"getnotebook",
			"notebook",
			"notes",
			"createexam",
			"profile",
			"createprofile",
			"gcm",
			"notiftext",
			"sendnotificationsingle",
			"sendnotification",
			"gcmid",
			"fcm",
			"sendnotification",
			"sendnotifi",
			"requests",
			".put",
			"urlsafe",
			".set",
			"set",
			"response",
			"collegerequest",
			"response",
			".put",
			"collegerequest",
			"sparkpost",
			"collegerequestmodel",
			"collegerequest",
			"collegerequestmethod",
			"collegerequest",
			"notebooklist",
			"type ==",
			"failed",
			"append",
			"url",
			"url[0]",
			"changepic",
			"imageupload",
			"imageuploadweb",
			"/imgweb",
			"igweb",
			"input",
			"fileinput",
			"fileUpload",
			"len",
			"imageuploadweb",
			"imgweb",
			"/imgweb",
			"print",
			"loader",
			"upload",
			"date",
			"newupload",
			"upload",
			"/img",
			".attr",
			"newupload",
			"id=\"upload",
			"android",
			"get(",
			"form",
			"file",
			"body",
			"60",
			"no_image",
			"notebook",
			"profileId",
			"pid",
			"pidf",
			"pid",
			"url[1]",
			"url",
			"extradata",
			"pid",
			"fileupload",
			"uploadurl",
			"ajax",
			"fileUpload",
			"imageupload",
			"/img",
			"img",
			"fileupload",
			"uploadnotes",
			"upload selected files",
			"uploadnotes",
			"post",
			".submit",
			"fileinput",
			"/img",
			"form",
			"/img",
			"pre ajax",
			"getfilestack",
			"fileupload1",
			"fileupload",
			"upload",
			"form",
			"delete_api",
			"imageuploadweb",
			"console.log",
			"notebook",
			"upload",
			"form",
			"src",
			"success",
			"alert",
			"print",
			"sign_up_api",
			"input",
			"inout",
			"input",
			"file",
			"logout"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"src",
			"currentMovie",
			"m",
			"movie"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "realTest.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 42448,
						"regions":
						{
						},
						"selection":
						[
							[
								4015,
								4015
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 92.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "demoCourse.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5982,
						"regions":
						{
						},
						"selection":
						[
							[
								2201,
								2201
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 94.0,
						"translation.y": 182.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "apiMethods.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 90607,
						"regions":
						{
						},
						"selection":
						[
							[
								90093,
								90093
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 31150.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 22.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.doc":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 100.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 100.0
	},
	"pinned_build_system": "",
	"project": "cc-backend-new.sublime-project",
	"replace":
	{
		"height": 40.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 249.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
